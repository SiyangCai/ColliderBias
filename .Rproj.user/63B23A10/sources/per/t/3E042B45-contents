library(sandwich)
library(numDeriv)
library(mvtnorm)
library(survival)
library(data.table)
library(matrixStats)
library(SlopeHunter)

simexllhdbivariate = function (pars, simex.estimates) 
{
    betaLambdaMean = pars[1] / (1 + (simex.estimates[, 1] + 1) * exp(pars[2]))
    betaLambdaVar = simex.estimates[, 3]
    llhd = -sum(dnorm(simex.estimates[, 2], mean = betaLambdaMean, sd = sqrt(betaLambdaVar), log = T))
    llhd
}

simexloglikelihood = function (pvar, pmean, simex.estimates) 
{
    betaLambdaMean = pmean / (1 + (simex.estimates[, 1] + 1) * exp(pvar))
    betaLambdaVar = simex.estimates[, 3]
    llhd = -sum(dnorm(simex.estimates[, 2], mean = betaLambdaMean, sd = sqrt(betaLambdaVar), log = T))
    llhd
}

simexpllhd = function (p, simex.estimates, variance.ratio)
{
    lowerbound = (p ^ 2 * variance.ratio - 1) / (simex.estimates[,1] + 1)
    if (min(lowerbound) > 0)
        lowerbound = max(log(lowerbound / (simex.estimates[, 1] + 1)))
    optimise(simexloglikelihood, c(lowerbound, 10), p, simex.estimates)$objective
}

simexpCI = function (simex.estimates, variance.ratio)
{
    profileFit = optimise(simexpllhd, c(-100, 100), simex.estimates, variance.ratio)
    obj = function(p)
        (2 * (simexpllhd(p, simex.estimates, variance.ratio) - profileFit$obj) - qchisq(0.95, 1)) ^ 2
    lowerCI = optimise(obj, c(-100, profileFit$min))$min
    upperCI = optimise(obj, c(profileFit$min, 100))$min
    c(profileFit$min, lowerCI, upperCI)
}


new_simex = function (xbeta,
                        xse,
                        ybeta,
                        yse,
                        weighted,
                        prune = NULL,
                        method,
                        model,
                        B = 100,
                        lambda = seq(0.25, 5, 0.25),
                        seed = 0)
    
{
    if (is.null(prune)){ 
        prune = 1:length(xbeta)}
    
    xbetaprune = xbeta[prune]
    xseprune = xse[prune]
    ybetaprune = ybeta[prune]
    yseprune = yse[prune]
    
    if (weighted == "1"){
        weight = 1 / yseprune ^ 2
    }
    if (weighted == "2"){
        weight = 1 / (yseprune ^ 2 + (ybetaprune / xbetaprune) ^ 2 * xseprune ^ 2)
    }
    if (weighted == "0"){
        weight = rep(1, length(prune))}
    
    if (tolower(model) == "egger"){
        fit = lm(ybetaprune ~ xbetaprune, weights = weight)
        b.raw = as.numeric(fit$coef[2])
    }
    
    if (tolower(model) == "ivw"){
        fit = lm(ybetaprune ~ xbetaprune - 1, weights = weight)
        b.raw = as.numeric(fit$coef)
    }
    
    if (tolower(method) == "hedges-olkin") {
        if(tolower(model) == "egger"){
            ho = (sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2) / 
                (sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE))
        }
        
        if (tolower(model) == "ivw"){
            ho = sum(weight * xbeta ^ 2, na.rm = TRUE) / 
                (sum(weight * xbeta ^ 2, na.rm = TRUE) - sum(weight * xse ^ 2, na.rm = TRUE))
        }
        
        b = b.raw * ho
        slope.ho = b
        b.ci = rep(b, 2)
        b.se = 0
        simex.estimates = NULL
    }
    
    
    if(tolower(method) == "fast"){
        if(tolower(model) == "egger"){
            simex.estimates = fit$coef[2]
            simex.variance.sandwich = vcovHC(fit)[2,2]    
        
            sum.weight.weight <- sum(weight) * weight
            sum.ybeta <- sum(weight * ybetaprune)
            
            ho = (sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2) / 
                (sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE)) 
            slope.ho = b.raw * ho
            m = length(xbetaprune)
            
            progress = txtProgressBar(max = length(lambda), width = 10, style = 3)
            
            set.seed(seed)
            
            for(l in 1:length(lambda)) {
                # simulate matrix of xbeta + sampling errors
                simex.errors <- matrix(rnorm(m*B, mean= xbetaprune, sd = xse*sqrt(lambda[l])), nrow = m, ncol = B)
                weight.simex.errors <- weight %*% simex.errors
                
                simex.numer <- (sum.weight.weight * ybetaprune) %*% simex.errors - weight.simex.errors * sum.ybeta
                simex.denom <- sum.weight.weight %*% simex.errors^2 - weight.simex.errors^2
                simexcoef <- simex.numer / simex.denom
                
                # take their mean 
                simex.estimates = c(simex.estimates, mean(simexcoef))
                
                setTxtProgressBar(progress, l)
            }

            set.seed(seed)
            
            for(l in 1:length(lambda)){
                simexdata = rnorm(length(xbetaprune), mean = xbetaprune, sd = xse*sqrt(lambda[l]))
                simexfit = lm(ybetaprune ~ simexdata, weights = weight)
                svar = vcovHC(simexfit)[2,2]
                
                simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
                setTxtProgressBar(progress, l)
            }
            
            
            simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
            colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
            rownames(simex.estimates) <- NULL
            
            simexMLE.fast = nlm(simexllhdbivariate, c(slope.ho ,log(ho-1)), simex.estimates = simex.estimates)
          

            b = simexMLE.fast$estimate[1]

            h = hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates = simex.estimates)
            h.inv = solve(h)
            b.se = sqrt(h.inv[1,1])
            b.ci = c(b - qnorm(0.975) * b.se, b + qnorm(0.975) * b.se)
        }
    
        if(tolower(model) == "ivw"){
        simex.estimates = fit$coef
        simex.variance.sandwich = vcovHC(fit)   
        m = length(xbetaprune)
        
        ho = sum(weight * xbeta ^ 2, na.rm = TRUE) / 
            (sum(weight * xbeta ^ 2, na.rm = TRUE) - sum(weight * xse ^ 2, na.rm = TRUE))
        slope.ho = b.raw * ho
        
        progress = txtProgressBar(max = length(lambda), width = 10, style = 3)
        
        set.seed(seed)
        for(l in 1:length(lambda)) {
            # simulate matrix of xbeta + sampling errors
            simex.errors <- matrix(rnorm(m*B, mean= xbetaprune, sd = xse*sqrt(lambda[l])), nrow = m, ncol = B)
            
            simex.numer <- (weight * ybetaprune) %*% simex.errors 
            simex.denom <- weight %*% simex.errors ^ 2
            simexcoef <- simex.numer / simex.denom
            
            # take their mean 
            simex.estimates = c(simex.estimates, mean(simexcoef))
            
            setTxtProgressBar(progress, l)
        }
        
        set.seed(seed)
        for(l in 1:length(lambda)){
            simexdata = rnorm(length(xbetaprune), mean = xbetaprune, sd = xse*sqrt(lambda[l]))
            simexfit = lm(ybetaprune ~ simexdata - 1, weights = weight)
            svar = vcovHC(simexfit)[1,1]
            
            simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
            
            setTxtProgressBar(progress, l)
        }
        
        
        simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
        colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
        rownames(simex.estimates) <- NULL
        
        
        simexMLE.fast <- nlm(simexllhdbivariate, c(slope.ho, log(ho - 1)), simex.estimates = simex.estimates)
        b = simexMLE.fast$estimate[1] #-0.3354914

        h <- hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates = simex.estimates)
        h.inv <- solve(h)
        b.se = sqrt(h.inv[1,1])
        b.ci = c(b - qnorm(0.975) * b.se, b + qnorm(0.975) * b.se)
    }
    }
    
    ybeta.adj = rep(0, length(ybeta))
    ybeta.adj = ybeta - b * xbeta
    yse.adj = sqrt(yse ^ 2 + b ^ 2 * xse ^ 2)
    ychisq.adj = (ybeta.adj / yse.adj) ^ 2
    yp.adj = pchisq(ychisq.adj, 1, lower = F)
    results = list(
        ybeta.adj = ybeta.adj,
        yse.adj = yse.adj,
        ychisq.adj = ychisq.adj,
        yp.adj = yp.adj,
        b = b,
        b.ho = slope.ho,
        b.se = b.se,
        b.ci = b.ci,
        b.raw = b.raw,
        simex.estimates = simex.estimates
    )
    class(results) = ("indexevent")
    results
}



simulateEffects = function(nsnp=1e5, #number of SNPs
                           pi01=0.9, # proportion of null SNPs on index trait
                           pi02=0.9, # proportion of null SNPs on secondary trait
                           pi11=0.05, # proportion of SNPs with effect on both traits
                           corr=0 # correlation between effects for SNPs affecting on both traits
) {
    
    # simulated effects for the shared loci
    nBeta = round((nsnp-1)*(1-pi01))
    nGamma = round(nsnp*(1-pi02))
    nShared = round(nsnp*pi11)
    nBetaGamma = nBeta+nGamma-nShared
    
    snpvg1 = 1/nBeta
    snpvg2 = 1/nGamma
    snpcorr = corr*sqrt(snpvg1*snpvg2)
    betaEffect = NULL
    gammaEffect = NULL
    if (pi11>0) {
        betabiv = rmvnorm(nShared,sigma=rbind(c(snpvg1,snpcorr),c(snpcorr,snpvg2)))
        betaEffect = betabiv[,1]
        gammaEffect = betabiv[,2]
    }
    
    # simulated effects for the non-shared loci
    betaEffect = c(betaEffect,rnorm(nBeta-nShared,sd=sqrt(snpvg1)),rep(0,nGamma-nShared))
    gammaEffect = c(gammaEffect,rep(0,nBeta-nShared),rnorm(nGamma-nShared,sd=sqrt(snpvg2)))
    
    # allele frequencies
    freq = runif(nBetaGamma,min=0.01,max=0.99)
    
    # genotype simulation data
    write.table(cbind(1,paste("snp",0:(nBetaGamma-1),sep="_"),freq,freq,1,1),"simulate.plink",row.names=F,col.names=F,quote=F)
    
    # phenotype simulation data
    write.table(cbind(paste("snp",0:(nBetaGamma-1),sep="_"),1,betaEffect/sqrt(2*freq*(1-freq))),"beta.effects",row.names=F,col.names=F,quote=F)
    write.table(cbind(paste("snp",0:(nBetaGamma-1),sep="_"),1,gammaEffect/sqrt(2*freq*(1-freq))),"gamma.effects",row.names=F,col.names=F,quote=F)
    
}

####################
simulateGWAS = function(nsnp,
                        vg1,
                        vg2,
                        vu,
                        binary,
                        n,
                        ncase,
                        ncontrol,
                        prev,
                        prev2,
                        niter = 1)
{
    # load the true effect sizes
    beta.true = read.table("beta.effects")[, 3]
    gamma.true = read.table("gamma.effects")[, 3]
    if (length(beta.true) < nsnp)
        beta.true = c(beta.true, rep(0, nsnp - length(beta.true)))
    if (length(gamma.true) < nsnp)
        gamma.true = c(gamma.true, rep(0, nsnp - length(gamma.true)))
    
    type1_all_naive = rep(0, niter)
    type1_all_adj = rep(0, niter)
    type1_all_adj_ho = rep(0, niter)
    type1_index_naive = matrix(0, nrow = niter, ncol = sum(gamma.true == 0 & beta.true != 0))
    type1_index_adj = type1_index_naive
    type1_index_adj_ho = type1_index_naive
    fwer_naive = rep(0, niter)
    fwer_adj = rep(0, niter)
    fwer_adj_ho = rep(0, niter)
    
    power_all_naive = rep(0, niter)
    power_all_adj = rep(0, niter)
    power_all_adj_ho = rep(0, niter)
    power_index_naive = matrix(0, nrow = niter, ncol = sum(gamma.true != 0 & beta.true != 0))
    power_index_adj = power_index_naive
    power_index_adj_ho = power_index_naive
    
    bias_all_naive = rep(0, niter)
    bias_all_adj = rep(0, niter)
    bias_all_adj_ho = rep(0, niter)
    bias_index_naive = matrix(0, nrow = niter, ncol = sum(beta.true != 0))
    bias_index_adj = bias_index_naive
    bias_index_adj_ho = bias_index_naive
    
    mse_all_naive = rep(0, niter)
    mse_all_adj = rep(0, niter)
    mse_all_adj_ho = rep(0, niter)
    mse_index_naive = bias_index_naive
    mse_index_adj = bias_index_naive
    mse_index_adj_ho = bias_index_naive
    
    progress = txtProgressBar(max = niter, width = 10, style = 3)
    for (iter in 1:niter) {
        # simulate the genotypes
        seed = round(runif(1, 0, 2 ^ 31))
        system(paste("C:/Users/caisy/Desktop/plink/plink --silent --seed", seed, " --simulate simulate.plink 12 --simulate-ncases 0 --simulate-ncontrols ", n, " --make-bed --out simgeno"))
        
        # simulate genetic phenotypes
        system("C:/Users/caisy/Desktop/plink/plink --bfile simgeno --silent --score beta.effects sum center --out simgeno.beta")
        system("C:/Users/caisy/Desktop/plink/plink --bfile simgeno --silent --score gamma.effects sum center --out simgeno.gamma")
        
        # add in confounder and residual error
        indexTrait = read.table("simgeno.beta.profile", header = T)[, -(3:5)]
        secondaryTrait = read.table("simgeno.gamma.profile", header = T)[, -(3:5)]
        
        u = rnorm(n, sd = sqrt(vu))
        indexTrait[, 3] = (indexTrait[, 3] - mean(indexTrait[, 3])) / sd(indexTrait[, 3])
        indexTrait[, 3] = indexTrait[, 3] * sqrt(vg1) + u + rnorm(n, sd = sqrt(1 - vg1 - vu))
        secondaryTrait[, 3] = (secondaryTrait[, 3] - mean(secondaryTrait[, 3])) / sd(secondaryTrait[, 3])
        secondaryTrait[, 3] = secondaryTrait[, 3] * sqrt(vg2) + u + rnorm(n, sd = sqrt(1 - vg2 - vu))
        
        if (binary) {
            indexTrait[, 3] = (indexTrait[, 3] < qnorm(prev)) + 1
            cases = which(indexTrait[, 3] == 2)[1:ncase]
            controls = which(indexTrait[, 3] == 1)[1:ncontrol]
            secondaryTrait[,3] = (secondaryTrait[,3] < qnorm(prev2))+1
            #secondaryTrait[,3] = (secondaryTrait[,3]<median(secondaryTrait[,3]))+1
            
            ## dummy secondary trait for controls
            #secondaryTrait[controls, 3] = 0
            #secondaryTrait[,3] = -log(runif(nrow(secondaryTrait)))/exp(secondaryTrait[,3])
        }
        else {
            cases = 1:n
            controls = NULL
        }
        
        write.table(indexTrait[c(cases, controls), ], "indexTrait.phen", row.names = F, col.names = F, quote = F)
        write.table(secondaryTrait[cases,],"secondaryTrait.phen",row.names=F,col.names=F,quote=F)
        ## with dummy secondary traits for controls
        #write.table(secondaryTrait[c(cases, controls), ], "secondaryTrait.phen", row.names = F, col.names = F, quote = F)
        
        # association tests of index trait
        if (binary) {
            system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --pheno indexTrait.phen --logistic beta --ci 0.95 --out beta")
        } else {
            system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --pheno indexTrait.phen --linear --ci 0.95 --out beta")
        }
        
        # association tests of secondary trait
        if (binary) {
            system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --pheno secondaryTrait.phen --logistic beta --ci 0.95 --out gamma")
            ## with dummy secondary traits for controls
            #system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --pheno secondaryTrait.phen --covar indexTrait.phen --linear beta hide-covar --ci 0.95 --out gamma")
            #system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --pheno secondaryTrait.phen --linear --ci 0.95 --out gamma")
            #system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --keep secondaryTrait.phen --recode A --out simgeno")
            #a=fread("simgeno.raw",header=T,data.table=F)
            #sobj=Surv(secondaryTrait[cases,3],rep(1,length(cases)))
            #gamma.assoc=apply(a[,-(1:6)],2, function(x) {summary(coxph(sobj~x))$coef[1,c(1,3)]})
            #gamma.assoc=data.frame(t(gamma.assoc))
            #colnames(gamma.assoc)=c("BETA","SE")
        } 
        else {
            system("C:/Users/caisy/Desktop/plink/plink --silent --bfile simgeno --pheno secondaryTrait.phen --covar indexTrait.phen --linear hide-covar --ci 0.95 --out gamma")
        }
        
        if (binary) {
            beta.assoc = read.table("beta.assoc.logistic", header = T)
        } 
        else {beta.assoc = read.table("beta.assoc.linear", header = T)}
        beta.assoc$BETA[beta.assoc$A1 == "2"] = -beta.assoc$BETA[beta.assoc$A1 == "2"]
        
        if (binary) {
            gamma.assoc = read.table("gamma.assoc.logistic", header = T)
        } else {
            gamma.assoc = read.table("gamma.assoc.linear", header = T)
        }
        gamma.assoc$BETA[gamma.assoc$A1 == "2"] = -gamma.assoc$BETA[gamma.assoc$A1 == "2"]
        
        # index event bias correction
        indexSE = which(!is.na(beta.assoc$SE) & !is.na(gamma.assoc$SE))
        betaSE = beta.assoc$SE[indexSE]
        gammaSE = gamma.assoc$SE[indexSE]
        if (length(beta.assoc$BETA) < nsnp) {
            randomSE = sample(betaSE, nsnp - length(beta.assoc$BETA), replace = T)
            betahat = c(beta.assoc$BETA, rnorm(nsnp - length(beta.assoc$BETA), sd = randomSE)) 
            betahatSE = c(beta.assoc$SE, randomSE)
            randomSE = sample(gammaSE, nsnp - length(gamma.assoc$BETA), replace = T)
            gammahat = c(gamma.assoc$BETA, rnorm(nsnp - length(gamma.assoc$BETA), sd = randomSE)) 
            gammahatSE = c(gamma.assoc$SE, randomSE)
        }
        else {
            betahat = beta.assoc$BETA
            betahatSE = beta.assoc$SE
            gammahat = gamma.assoc$BETA 
            gammahatSE = gamma.assoc$SE
        }
        gammahatP = pchisq((gammahat / gammahatSE) ^ 2, 1, lower = F)
        
        write.table(cbind(betahat,betahatSE,gammahat,gammahatSE),"testData",row.names=F, col.names=c("xbeta","xse","ybeta","yse"),quote=F)
        testData = data.frame(betahat,betahatSE,gammahat,gammahatSE)
        names(testData) = c("xbeta","xse","ybeta","yse")

        #MR Egger
        #slope = mr.raps(betahat,gammahat,gammahatSE,betahatSE, over.dispersion = TRUE)
        slope =  slopehunter(dat = testData, xbeta_col="xbeta", xse_col="xse",
                              ybeta_col="ybeta", yse_col="yse",
                              comp.size = seq(0.03, 0.10, 0.01), xp.thresh = 0.05, coef.diff = 1,
                              correct.reg.dill = TRUE, show_adjustments = TRUE, seed=2019)
        
        gammacor = rep(0, length(betahat))
        b.adj = slope$b.raw
        gammacor = gammahat - b.adj * betahat
        gammacorSE = sqrt(gammahatSE ^ 2 + b.adj ^ 2 * betahatSE ^ 2)
        gammacorP = pchisq((gammacor / gammacorSE) ^ 2, 1, lower = F)
        
        # HO adjustment
        b.ho = slope$Sh.b
        gammacorHO = rep(0, length(betahat))
        gammacorHO = gammahat - b.ho * betahat
        gammacorHOSE = sqrt(gammahatSE ^ 2 + b.ho ^ 2 * betahatSE ^ 2)
        gammacorHOP = pchisq((gammacorHO / gammacorHOSE) ^ 2, 1, lower = F)
        
        # Type-1 error
        type1_all_naive[iter] = mean(gammahatP[gamma.true == 0] < 0.05, na.rm = T)
        type1_all_adj[iter] = mean(gammacorP[gamma.true == 0] < 0.05, na.rm = T)
        type1_all_adj_ho[iter] = mean(gammacorHOP[gamma.true == 0] < 0.05, na.rm = T)
        
        type1_index_naive[iter, ] = (gammahatP[gamma.true == 0 & beta.true != 0] < 0.05)
        type1_index_adj[iter, ] = (gammacorP[gamma.true == 0 & beta.true != 0] < 0.05)
        type1_index_adj_ho[iter, ] = (gammacorHOP[gamma.true == 0 & beta.true != 0] < 0.05)
        
        fwer_naive[iter] = (min(gammahatP[gamma.true == 0 & beta.true != 0]) * length(gammahatP[gamma.true == 0 & beta.true != 0]) < 0.05)
        fwer_adj[iter] = (min(gammacorP[gamma.true == 0 & beta.true != 0]) * length(gammacorP[gamma.true == 0 & beta.true != 0]) < 0.05)
        fwer_adj_ho[iter] = (min(gammacorHOP[gamma.true == 0 & beta.true != 0]) * length(gammacorHOP[gamma.true == 0 & beta.true != 0]) < 0.05)
        
        # Power
        power_all_naive[iter] = mean(gammahatP[gamma.true != 0] < 0.05, na.rm = T)
        power_all_adj[iter] = mean(gammacorP[gamma.true != 0] < 0.05, na.rm = T)
        power_all_adj_ho[iter] = mean(gammacorHOP[gamma.true != 0] < 0.05, na.rm = T)
        
        power_index_naive[iter, ] = (gammahatP[gamma.true != 0 & beta.true != 0] < 0.05)
        power_index_adj[iter, ] = (gammacorP[gamma.true != 0 & beta.true != 0] < 0.05)
        power_index_adj_ho[iter, ] = (gammacorHOP[gamma.true != 0 & beta.true != 0] < 0.05)
        
        # Bias
        bias_all_naive[iter] = mean(abs(gammahat - gamma.true), na.rm = T)
        bias_all_adj[iter] = mean(abs(gammacor - gamma.true), na.rm = T)
        bias_all_adj_ho[iter] = mean(abs(gammacorHO - gamma.true), na.rm = T)
        
        bias_index_naive[iter, ] = (gammahat[beta.true != 0] - gamma.true[beta.true != 0])
        bias_index_adj[iter, ] = (gammacor[beta.true != 0] - gamma.true[beta.true != 0])
        bias_index_adj_ho[iter, ] = (gammacorHO[beta.true != 0] - gamma.true[beta.true != 0])
        
        # MSE
        mse_all_naive[iter] = mean((gammahat - gamma.true) ^ 2, na.rm = T)
        mse_all_adj[iter] = mean((gammacor - gamma.true) ^ 2, na.rm = T)
        mse_all_adj_ho[iter] = mean((gammacorHO - gamma.true) ^ 2, na.rm = T)
        
        mse_index_naive[iter, ] = (gammahat[beta.true != 0] - gamma.true[beta.true != 0]) ^ 2
        mse_index_adj[iter, ] = (gammacor[beta.true != 0] - gamma.true[beta.true != 0]) ^ 2
        mse_index_adj_ho[iter, ] = (gammacorHO[beta.true != 0] - gamma.true[beta.true != 0]) ^ 2
        
        setTxtProgressBar(progress, iter)
        
    } #iter
    
    print("Type-1 error")
    print(paste("All SNPs", mean(type1_all_naive), mean(type1_all_adj), mean(type1_all_adj_ho)))
    print(paste("SNPs with index effects", mean(type1_index_naive, na.rm = T), mean(type1_index_adj, na.rm = T), mean(type1_index_adj_ho, na.rm = T)))
    print(paste("Max over SNPs with index effects", max(apply(type1_index_naive, 2, mean), na.rm = T), max(apply(type1_index_adj, 2, mean), na.rm = T), max(apply(type1_index_adj_ho, 2, mean), na.rm = T)))
    if (FALSE) {
        maxNaive = apply(type1_index_naive, 2, mean)
        whichNaive = which(maxNaive == max(maxNaive, na.rm = T))
        whichNaiveIndex = which(gamma.true == 0 & beta.true != 0)[whichNaive]
        print(paste("Max naive SNP", whichNaiveIndex, "effect", beta.true[whichNaiveIndex], "type=1", mean(type1_index_naive[, whichNaive], na.rm = T), mean(type1_index_adj[, whichNaive], na.rm = T), mean(type1_index_adj_ho[, whichNaive], na.rm = T)))
    }
    
    print(paste("Family-wise error", mean(fwer_naive, na.rm = T), mean(fwer_adj, na.rm = T), mean(fwer_adj_ho, na.rm = T)))
    print("Power")
    print(paste("All SNPs", mean(power_all_naive), mean(power_all_adj), mean(power_all_adj_ho)))
    print(paste("SNPs with index effects", mean(power_index_naive, na.rm = T), mean(power_index_adj, na.rm = T), mean(power_index_adj_ho, na.rm = T)))
    powerDiff = apply(power_index_naive, 2, mean) - apply(power_index_adj_ho, 2, mean)
    whichMaxDiff = which(powerDiff == max(powerDiff, na.rm = T))
    whichMinDiff = which(powerDiff == min(powerDiff, na.rm = T))
    print(paste("Max difference", mean(power_index_naive[, whichMaxDiff]), mean(power_index_adj[, whichMaxDiff]), mean(power_index_adj_ho[, whichMaxDiff])))
    whichMaxDiffIndex = which(gamma.true != 0 & beta.true != 0)[whichMaxDiff]
    if (FALSE) {
        print(paste("for SNP", whichMaxDiffIndex, ": index effect", beta.true[whichMaxDiffIndex], ", secondary effect", gamma.true[whichMaxDiffIndex]))
    }
    print(paste("Min difference", mean(power_index_naive[, whichMinDiff]), mean(power_index_adj[, whichMinDiff]), mean(power_index_adj_ho[, whichMinDiff])))
    if (FALSE) {
        whichMinDiffIndex = which(gamma.true != 0 & beta.true != 0)[whichMinDiff]
        print(paste("for SNP", whichMinDiffIndex, ": index effect", beta.true[whichMinDiffIndex], ", secondary effect", gamma.true[whichMinDiffIndex]))
    }
    
    print("FDR")
    print(paste(sum(type1_index_naive)/(sum(type1_index_naive) + sum(power_index_naive)), sum(type1_index_adj) /(sum(type1_index_adj) + sum(power_index_adj)), sum(type1_index_adj_ho)/(sum(type1_index_adj_ho) + sum(power_index_adj_ho))))
    
    print("Absolute bias")
    print(paste("All SNPs", mean(bias_all_naive), mean(bias_all_adj), mean(bias_all_adj_ho)))
    print(paste("SNPs with index effects", mean(abs(apply(bias_index_naive, 2, mean)), na.rm = T), mean(abs(apply(bias_index_adj, 2, mean)), na.rm = T), mean(abs(apply(bias_index_adj_ho, 2, mean)), na.rm = T)))
    if (FALSE) {
        maxNaive = apply(bias_index_naive, 2, mean)
        whichNaive = which(maxNaive == max(maxNaive, na.rm = T))
        whichNaiveIndex = which(beta.true != 0)[whichNaive]
        print(paste("Max naive SNP", whichNaiveIndex, "effect", beta.true[whichNaiveIndex], "bias", mean(bias_index_naive[, whichNaive], na.rm = T), mean(bias_index_adj[, whichNaive], na.rm = T), mean(bias_index_adj_ho[, whichNaive], na.rm = T)))
        maxAdjHO = apply(bias_index_adj_ho, 2, mean)
        whichAdjHO = which(maxAdjHO == max(maxAdjHO, na.rm = T))
        whichAdjHOIndex = which(beta.true != 0)[whichAdjHO]
        print(paste("Max adjusted SNP", whichAdjHOIndex, "effect", beta.true[whichAdjHOIndex], "bias", mean(bias_index_naive[, whichAdjHO], na.rm = T), mean(bias_index_adj[, whichAdjHO], na.rm = T), mean(bias_index_adj_ho[, whichAdjHO], na.rm = T)))
        
        biasDiff = abs(apply(bias_index_naive, 2, mean)) - abs(apply(bias_index_adj_ho, 2, mean))
        whichMaxDiff = which(biasDiff == max(biasDiff, na.rm = T))
        whichMinDiff = which(biasDiff == min(biasDiff, na.rm = T))
        print(paste("Max difference", mean(bias_index_naive[, whichMaxDiff]), mean(bias_index_adj[, whichMaxDiff]), mean(bias_index_adj_ho[, whichMaxDiff])))
        #print(c(mean(bias_index_adj_ho[,4691]),gammacorHOSE[4691]))
        whichMaxDiffIndex = which(beta.true != 0)[whichMaxDiff]
        print(paste("for SNP", whichMaxDiffIndex, ": index effect", beta.true[whichMaxDiffIndex], ", secondary effect", gamma.true[whichMaxDiffIndex]))
        print(paste("Min difference", mean(bias_index_naive[, whichMinDiff]), mean(bias_index_adj[, whichMinDiff]), mean(bias_index_adj_ho[, whichMinDiff])))
        whichMinDiffIndex = which(beta.true != 0)[whichMinDiff]
        print(paste("for SNP", whichMinDiffIndex, ": index effect", beta.true[whichMinDiffIndex], ", secondary effect", gamma.true[whichMinDiffIndex]))
    }
    
    print("MSE")
    print(paste("All SNPs", mean(mse_all_naive), mean(mse_all_adj), mean(mse_all_adj_ho)))
    print(paste("SNPs with index effects", mean(mse_index_naive, na.rm = T), mean(mse_index_adj, na.rm = T), mean(mse_index_adj_ho, na.rm = T)))
    if (FALSE) {
        mseDiff = apply(mse_index_naive, 2, mean) - apply(mse_index_adj_ho, 2, mean)
        whichMaxDiff = which(mseDiff == max(mseDiff, na.rm = T))
        whichMinDiff = which(mseDiff == min(mseDiff, na.rm = T))
        print(paste("Max difference", mean(mse_index_naive[, whichMaxDiff]), mean(mse_index_adj[, whichMaxDiff]), mean(mse_index_adj_ho[, whichMaxDiff])))
        whichMaxDiffIndex = which(beta.true != 0)[whichMaxDiff]
        print(paste("for SNP", whichMaxDiffIndex, ": index effect", beta.true[whichMaxDiffIndex], ", secondary effect", gamma.true[whichMaxDiffIndex]))
        print(paste("Min difference", mean(mse_index_naive[, whichMinDiff]), mean(mse_index_adj[, whichMinDiff]), mean(mse_index_adj_ho[, whichMinDiff])))
        whichMinDiffIndex = which(beta.true != 0)[whichMinDiff]
        print(paste("for SNP", whichMinDiffIndex, ": index effect", beta.true[whichMinDiffIndex], ", secondary effect", gamma.true[whichMinDiffIndex]))
    }
}


########################
### Main program
########################

setwd("C:/Users/caisy/Documents/simulation/")

nsnp = 100000
binary=F
n= 20000
ncase=10000
ncontrol=10000
prev=0.2
prev2=0.5
vg1=0.5
vg2=0.5
vu=0.4

set.seed(1453)
simulateEffects(nsnp,pi01=0.9,pi02=0.9,pi11=0.05,cor= 0.0)
simulateGWAS(nsnp,vg1,vg2,vu,binary,n,ncase,ncontrol,prev,prev2,niter= 1000)
# "mean of HO"
# -0.4594151
# "SE of HO"
# 0.003321146
# "Max diff of HO"
# 0.03321146


# "mean of SIMEX"
# -0.3771829
# "SE of SIMEX"
# 0.004246062
# "Max diff of SIMEX"
# 0.04246062

# "mean of SIMEX.se"
# 0.08784188
# "Max diff of SIMEX.se"
# 0.004809078




#B = 10000 ,10 iterations
# "mean of HO"
# -0.4151675
# "SE of HO"
# 0.05254489
# "Max diff of HO"
# 0.1564344

# "mean of SIMEX"
# -0.4151351
# "SE of SIMEX"
# 0.05251513
# "Max diff of SIMEX"
# 0.1563949

# "mean of SIMEX.se"
# 0.01219343
# "SE of SIMEX.se"
# 0.002857446
# "Max diff of SIMEX.se"
# 0.00817266




#B= 1000, 100 iterations
# "mean of HO"
# -0.4067631
# "SE of HO"
# 0.05808251
# "Max diff of HO"
# 0.3074441

# "mean of SIMEX"
# -0.4074982
# "SE of SIMEX"
# 0.05862857
# "Max diff of SIMEX"
# 0.3068473

# "mean of SIMEX.se"
# 0.03707844
# "SE of SIMEX.se"
# 0.008769271
# "Max diff of SIMEX.se"
# 0.04088199






testData <- read.csv("C:/Users/caisy/Desktop/index event/testData", sep="")
attach(testData)
m = length(xbeta)

weight = 1/ yse ^ 2
fits = lm(ybeta ~ xbeta, weights = weight, x = TRUE, y = TRUE)
fits$coef

mod.sim <- simex(model = fits, B=100, SIMEXvariable="xbeta", measurement.error = xse, fitting.method ="quad", asymptotic = "FALSE")
l = mod.sim$SIMEX.estimates[, 1] + 1
b = mod.sim$SIMEX.estimates[, 3]
plot(l[-1],b[-1],ylab="",xlab="",pch=19,ylim=range(b),xlim=range(l))
mtext(side=2,"Causal estimate",line=2.5,cex=1.5)
mtext(side=1,expression(1+lambda),line=2.5,cex=1.5)
points(c(1,1),rep(fits$coef[2],2),cex=2,col="blue",pch=19)
points(c(0,0),rep((mod.sim$coef[2]),2),cex=2,col="blue",pch=3)
legend("bottomleft",c("Naive MR-Egger","MR-Egger (SIMEX)"),
       pch = c(19,3),cex=1.5,bty="n",col=c("blue","blue"))
lsq = l^2; f = lm(b~l+lsq)
lines(l,f$fitted)



slope = fits$coef[2]
ybetacor = ybeta - slope * xbeta
ysecor = sqrt(yse ^ 2 + slope ^ 2 * xse ^ 2)
type1 <- mean(((ybetacor/ysecor)[5001:10000])^2 > qchisq(0.95,1)) #0.0752

###ho
ho = (sum(weight, na.rm = TRUE) * sum(weight * xbeta ^ 2, na.rm = TRUE) - (sum(weight * xbeta, na.rm = TRUE)) ^ 2) / 
    (sum(weight, na.rm = TRUE) * sum(weight * xbeta ^ 2, na.rm = TRUE) - (sum(weight * xbeta, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE))

slope.ho = slope * ho
ybetacor.ho = ybeta - slope.ho * xbeta
ysecor.ho = sqrt(yse ^ 2 + slope.ho ^ 2 * xse ^ 2)
type1.ho = mean(((ybetacor.ho/ysecor.ho)[5001:10000])^2 > qchisq(0.95,1)) #0.0486

####simex
lambda = seq(0.25, 5, 0.25)

set.seed(0)
B <- 100
simex.estimates <- fits$coef[2]
simex.variance.sandwich <- vcovHC(fits)[2,2]

for(l in 1:length(lambda)) {
    simexcoef <- rep(0,B)
    
    for(iter in 1:B) {
        simexdata = rnorm(length(xbeta), mean = xbeta, sd = xse*sqrt(lambda[l]))
        simexfit = lm(ybeta ~ simexdata, weights=weight)
        simexcoef[iter] = simexfit$coef[2]
    }

    simex.estimates = c(simex.estimates, mean(simexcoef))

    svar = vcovHC(simexfit)[2,2]
    
    simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
}

simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
rownames(simex.estimates) <- NULL

simex.estimates

#profile
slope.simex.profile = simexpCI(simex.estimates, var(xbeta)/var(ybeta))
slope.simex.profile #-0.3347621 -0.6454750 -0.2253343

#bivariate

# Initial guess for beta is the HO corrected estimate
# Initial guess for exp(c) is HO-1
simexMLE <- nlm(simexllhdbivariate, c(slope * ho, log(ho - 1)), simex.estimates)
simexMLE$estimate[1] #-0.3351469

h <- hessian(simexllhdbivariate, simexMLE$estimate, simex.estimates=simex.estimates)
h.inv <- solve(h)
simexSE <- sqrt(h.inv[1,1])
simexSE #0.08308099

#Fast simex
sum.weight.weight <- sum(weight)*weight
sum.ybeta <- sum(weight*ybeta)

B <- 100
set.seed(0)
simex.estimates.fast <- simex.estimates

for(l in 1:length(lambda)) {
    
    # simulate matrix of xbeta + sampling errors
    simex.errors <- matrix(rnorm(m*B, mean=xbeta, sd=xse*sqrt(lambda[l])), nrow=m, ncol=B)
    weight.simex.errors <- weight %*% simex.errors
    
    simex.numer <- (sum.weight.weight*ybeta) %*% simex.errors - weight.simex.errors * sum.ybeta
    simex.denom <- sum.weight.weight %*% simex.errors^2 - weight.simex.errors^2
    simexcoef <- simex.numer / simex.denom
    
    # take their mean 
    simex.estimates.fast[l+1,2] <- mean(simexcoef)
    
}

simex.estimates.fast

simexMLE.fast <- nlm(simexllhdbivariate, c(slope* ho,log(ho-1)), simex.estimates.fast)
simexMLE.fast$estimate[1]

h <- hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates=simex.estimates.fast)
h.inv <- solve(h)
simexSE.fast <- sqrt(h.inv[1,1])
simexSE.fast






n = 100
slope = rep(0,n)
slope.se = rep(0,n)
for(i in 1:n){
    seeds = round(runif(1, 0, 2 ^ 31))
    simex_result = new_simex(xbeta, xse, ybeta, yse, weighted = "1", method = "fast", B = 100, seed = seeds)
    slope[i] = simex_result$b
    slope.se[i] = simex_result$b.se
}

b.mean = mean(slope)#-0.4377634144807708
b.se = sd(slope)#0.0886034500716134
b.max = max(slope)#-0.2415299144315
b.min = min(slope)#-0.722235403810192




b.se.max = max(slope.se)#0.377537631592188
b.se.min = min(slope.se)#0.0430180965332928







##############################################################IVW
testData <- read.csv("C:/Users/caisy/Desktop/index event/testData", sep="")
attach(testData)
m = length(xbeta)


weight = 1/ yse ^ 2
fits = lm(ybeta ~ xbeta - 1, weights = weight, x = TRUE, y = TRUE)
fits$coef #-0.02441987 

slope = fits$coef
ybetacor = ybeta - slope * xbeta
ysecor = sqrt(yse ^ 2 + slope ^ 2 * xse ^ 2)
type1 <- mean(((ybetacor/ysecor)[5001:10000])^2 > qchisq(0.95,1)) # 0.0752


ho = sum(weight * xbeta ^ 2, na.rm = TRUE) / 
    (sum(weight * xbeta ^ 2, na.rm = TRUE) - sum(weight * xse ^ 2, na.rm = TRUE))

slope.ho = slope * ho
ybetacor.ho = ybeta - slope.ho * xbeta
ysecor.ho = sqrt(yse ^ 2 + slope.ho ^ 2 * xse ^ 2)
type1.ho = mean(((ybetacor.ho/ysecor.ho)[5001:10000])^2 > qchisq(0.95,1)) #0.0486

#FAST SIMEX
lambda = seq(0.25, 5, 0.25)
set.seed(0)
B <- 100

simex.estimates = fits$coef
simex.variance.sandwich = vcovHC(fits)   

set.seed(0)
for(l in 1:length(lambda)) {
    # simulate matrix of xbeta + sampling errors
    simex.errors <- matrix(rnorm(m*B, mean= xbeta, sd = xse*sqrt(lambda[l])), nrow = m, ncol = B)

    simex.numer <- (weight * ybeta) %*% simex.errors 
    simex.denom <- weight %*% simex.errors ^ 2
    simexcoef <- simex.numer / simex.denom
    
    # take their mean 
    simex.estimates = c(simex.estimates, mean(simexcoef))
    
}

set.seed(0)
for(l in 1:length(lambda)){
    simexdata = rnorm(length(xbeta), mean = xbeta, sd = xse*sqrt(lambda[l]))
    simexfit = lm(ybeta ~ simexdata - 1, weights = weight)
    svar = vcovHC(simexfit)[1,1]
    
    simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
}


simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
rownames(simex.estimates) <- NULL

simex.estimates

simexMLE.fast <- nlm(simexllhdbivariate, c(slope* ho, log(ho - 1)), simex.estimates)
slope.fast = simexMLE.fast$estimate[1] #-0.3354914
slope.fast

h <- hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates=simex.estimates)
h.inv <- solve(h)
h
simexSE.fast <- sqrt(h.inv[1,1])
simexSE.fast #0.08286127

ybetacor.fast = ybeta - slope.fast * xbeta
ysecor.fast = sqrt(yse ^ 2 + slope.fast ^ 2 * xse ^ 2)
type1.fast = mean(((ybetacor.fast/ysecor.fast)[5001:10000])^2 > qchisq(0.95,1))#0.0488


attach(testData)
new_simex(xbeta, xse, ybeta, yse, weighted = 1, model = "ivw", method = "fast", B = 100)



#index event paper, FDR of SNP with index effects, HO adjustment
#linear, unadjusted, HO
# Cor = 0
# 0.2628903 0.2336275

#Cor = 0.25
# 0.3647775 0.268617 

# Cor = 0.45
# 0.5555556 0.4346793 

# Cor = -0.25
# 0.2177745 0.3013333 

# Cor = -0.45
# 0.2070824 0.4497702 


# binary, unadjusted, HO
# Cor = 0
# 0.3703448 0.3688464

#Cor = 0.25
# 0.4205052 0.3943982

# Cor = 0.45
# 0.3534994 0.3717277

# Cor = -0.25
# 0.347185 0.4001536

# Cor = -0.45
# 0.3407557 0.4694049




# Cor = 0, linear cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0512065888888889 0.0510502777777778 0.0499912444444444"
# "SNPs with index effects 0.0723604 0.069598 0.0505106"
# "Max over SNPs with index effects 0.325 0.29 0.076"
# "Family-wise error 0.22 0.184 0.04"
# "Power"
# "All SNPs 0.194963 0.1937882 0.1654523"
# "SNPs with index effects 0.2023372 0.2000582 0.1637542"
# "Max difference 0.714 0.684 0.167"
# "Min difference 0.06 0.067 0.398"
# "FDR"
# "0.263418391715108 0.258099016451318 0.235739141473541"
# "Absolute bias"
# "All SNPs 0.0104110579711333 0.0104054613507393 0.0114600937521588"
# "SNPs with index effects 0.00537867538587754 0.00514513769892175 0.00243993830325678"
# "MSE"
# "All SNPs 0.000204402533810614 0.000204086949344936 0.000239670973967651"
# "SNPs with index effects 0.000252300104459067 0.000247839107742775 0.000253667776983548"

# Cor = 0.25, linear cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0517411 0.0515802666666667 0.0500815111111111"
# "SNPs with index effects 0.0819816 0.0791218 0.0523774"
# "Max over SNPs with index effects 0.44 0.407 0.09"
# "Family-wise error 0.356 0.319 0.06"
# "Power"
# "All SNPs 0.1927176 0.1920731 0.1743325"
# "SNPs with index effects 0.1896502 0.188418 0.16977"
# "Max difference 0.623 0.594 0.162"
# "Min difference 0.079 0.089 0.421"
# "FDR"
# "0.301811496297562 0.295738428450645 0.235777686346993"
# "Absolute bias"
# "All SNPs 0.010138799870157 0.0101312154717969 0.0108699170018343"
# "SNPs with index effects 0.00637027528988999 0.0061588906049029 0.00319588311987822"
# "MSE"
# "All SNPs 0.000194271767572405 0.000193871843060087 0.000216701697603386"
# "SNPs with index effects 0.000263622446320326 0.00025869433347122 0.000236561271512614"


# Cor = 0.45, linear cases, IVW HO
# "All SNPs 0.0522951444444444 0.0521315777777778 0.0503576222222222"
# "SNPs with index effects 0.0919543999999999 0.0890182 0.0573722"
# "Max over SNPs with index effects 0.543 0.51 0.151"
# "Family-wise error 0.499 0.462 0.089"
# "Power"
# "All SNPs 0.1885837 0.1883397 0.1784966"
# "SNPs with index effects 0.1731758 0.1727644 0.1671814"
# "Max difference 0.669 0.649 0.287"
# "Min difference 0.097 0.101 0.42"
# "FDR"
#  0.3468273 0.3400463 0.2554945
# "Absolute bias"
# "All SNPs 0.00988513844422573 0.00987681782177364 0.0103986806547844"
# "SNPs with index effects 0.00717882475093012 0.00699150500423476 0.00423986099353937"
# "MSE"
# "All SNPs 0.000185207868382773 0.000184775935477421 0.00019931825949333"
# "SNPs with index effects 0.000274849257014925 0.000269856344707099 0.000232517331199738"

# Cor = -0.25, linear cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0508019777777778 0.0506565222222222 0.0500763555555556"
# "SNPs with index effects 0.0650774 0.0625348 0.0521068"
# "Max over SNPs with index effects 0.239 0.213 0.086"
# "Family-wise error 0.13 0.116 0.052"
# "Power"
# "All SNPs 0.1950105 0.1931584 0.1534759"
# "SNPs with index effects 0.2087936 0.2051692 0.1496082"
# "Max difference 0.782 0.746 0.152"
# "Min difference 0.049 0.054 0.354"
# "FDR"
# "0.237620631611233 0.233596808415265 0.258318915301291"
# "Absolute bias"
# "All SNPs 0.0106388869040937 0.0106365225411649 0.0120520573300505"
# "SNPs with index effects 0.00442221328051916 0.00418547198289613 0.00328975452829246"
# "MSE"
# "All SNPs 0.000213204943716867 0.000213022804943302 0.000264013297586526"
# "SNPs with index effects 0.000243997252526132 0.00024043098362217 0.000284103206397134"

# Cor = -0.45, linear cases, IVW HO
# "Type-1 error"          
# "All SNPs 0.0505506888888889 0.0504194555555556 0.0502499333333333"
# "SNPs with index effects 0.0605542 0.058292 0.0553748"
# "Max over SNPs with index effects 0.191 0.16 0.139"
# "Family-wise error 0.102 0.087 0.067"
# "Power"
# "All SNPs 0.1937517 0.1912424 0.142062"
# "SNPs with index effects 0.2102458 0.205363 0.1336026"
# "Max difference 0.819 0.789 0.147"
# "Min difference 0.313 0.335 0.568"
# "FDR"
# "0.223612259970458 0.221091957292674 0.293023398565119"
# "Absolute bias"
# "All SNPs 0.0107921975113029 0.010793361535191 0.0125259471095534"
# "SNPs with index effects 0.00370542149879345 0.00348865826307268 0.00434925865324941"
# "MSE"
# "All SNPs 0.000219293618511697 0.000219253497518138 0.000284472094974674"
# "SNPs with index effects 0.000239536020859631 0.000236992428175949 0.000317994523502961"










# Cor = 0, binary cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0502113777777778 0.0501878111111111 0.0499976888888889"
# "SNPs with index effects 0.0536058 0.0532554 0.0501974"
# "Max over SNPs with index effects 0.105 0.103 0.074"
# "Family-wise error 0.069 0.066 0.046"
# "Power"
# "All SNPs 0.0899801 0.0897755 0.0863286"
# "SNPs with index effects 0.0913152 0.090941 0.0859212"
# "Max difference 0.545 0.537 0.371"
# "Min difference 0.14 0.145 0.27"
# "FDR"
# "0.369896702341276 0.369325447792039 0.368776934232353"
# "Absolute bias"
# "All SNPs 0.0368684826126062 0.0368659595932658 0.0378550528056491"
# "SNPs with index effects 0.020994147715853 0.020814793841056 0.0180499557497041"
# "MSE"
# "All SNPs 0.00259614771506077 0.00259566431436594 0.00270449503780754"
# "SNPs with index effects 0.00352079953480176 0.00351401041707868 0.00357165345222784"


# Cor = 0.25, binary cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0502895333333333 0.050268 0.0500208666666667"
# "SNPs with index effects 0.0550126 0.0546934 0.0506906"
# "Max over SNPs with index effects 0.117 0.113 0.077"
# "Family-wise error 0.097 0.092 0.063"
# "Power"
# "All SNPs 0.087194 0.0871263 0.0862044"
# "SNPs with index effects 0.0856318 0.0855012 0.0848504"
# "Max difference 0.32 0.316 0.203"
# "Min difference 0.256 0.265 0.4"
# "FDR"
# "0.391146750243877 0.390124869288831 0.373987206823028"
# "Absolute bias"
# "All SNPs 0.0384704052658369 0.0384694774723036 0.0391406196699588"
# "SNPs with index effects 0.0212863699956228 0.021168383120051 0.019037099414205"
# "MSE"
# "All SNPs 0.00282335515300757 0.00282320393250746 0.00290123949170877"
# "SNPs with index effects 0.00371657675973347 0.00371383705256633 0.00379184953723976"


# Cor = 0.45, binary cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0503628666666667 0.0503451666666667 0.0500755333333333"
# "SNPs with index effects 0.0563326 0.056059 0.0519608"
# "Max over SNPs with index effects 0.134 0.123 0.083"
# "Family-wise error 0.091 0.089 0.067"
# "Power"
# "All SNPs 0.0841693 0.084192 0.0845195"
# "SNPs with index effects 0.0796602 0.0796934 0.0812132"
# "Max difference 0.236 0.235 0.172"
# "Min difference 0.333 0.34 0.45"
# "FDR"
# "0.414232224058921 0.412950341946072 0.390172255845736"
# "Absolute bias"
# "All SNPs 0.0401326953545985 0.0401326246354091 0.0405937270427258"
# "SNPs with index effects 0.0214110017422571 0.0213350565276264 0.0199228668861074"
# "MSE"
# "All SNPs 0.00306960772869807 0.00306963886264753 0.00312654292872568"
# "SNPs with index effects 0.0039215543460232 0.00392113244247282 0.0040052770535288"


# Cor = -0.25, binary cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0501538 0.0501323333333333 0.0500272777777778"
# "SNPs with index effects 0.0525694 0.0522182 0.050799"
# "Max over SNPs with index effects 0.092 0.089 0.08"
# "Family-wise error 0.057 0.055 0.051"
# "Power"
# "All SNPs 0.0919425 0.0915465 0.0845902"
# "SNPs with index effects 0.0954036 0.0946326 0.083412"
# "Max difference 0.566 0.559 0.323"
# "Min difference 0.265 0.268 0.381"
# "FDR"
# "0.355263460225852 0.355586758805536 0.378501017055234"
# "Absolute bias"
# "All SNPs 0.0356567015963754 0.0356521407322672 0.0370132992259455"
# "SNPs with index effects 0.0206054434036389 0.0203578785841618 0.0182522112445293"
# "MSE"
# "All SNPs 0.00243086542813107 0.00242994010186148 0.0025739892145784"
# "SNPs with index effects 0.00337002642694325 0.00335795800936506 0.00338106484370236"


# Cor = -0.45, binary cases, IVW HO
# "Type-1 error"
# "All SNPs 0.0501086888888889 0.0500884888888889 0.0501041888888889"
# "SNPs with index effects 0.0517574 0.0514154 0.0521226"
# "Max over SNPs with index effects 0.084 0.078 0.096"
# "Family-wise error 0.052 0.051 0.06"
# "Power"
# "All SNPs 0.0927285 0.0921538 0.082039"
# "SNPs with index effects 0.0971024 0.0959618 0.0789694"
# "Max difference 0.601 0.588 0.291"
# "Min difference 0.08 0.084 0.179"
# "FDR"
# "0.347692258084453 0.348869431635287 0.397603209959418"
# "Absolute bias"
# "All SNPs 0.0349014721893391 0.0348948821209777 0.0365875775040162"
# "SNPs with index effects 0.0202266136366426 0.0199184790049707 0.0183204372725029"
# "MSE"
# "All SNPs 0.00233065909062186 0.00232930348040521 0.00250487503710894"
# "SNPs with index effects 0.00327062601018712 0.00325346938118322 0.00323934149809347"








########################## MR Egger HO

# Cor = 0, linear cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0512065888888889 0.0510502555555556 0.0499915555555556"
# "SNPs with index effects 0.0723604 0.0695982 0.0505112"
# "Max over SNPs with index effects 0.325 0.29 0.076"
# "Family-wise error 0.22 0.184 0.04"
# "Power"
# "All SNPs 0.194963 0.1937881 0.1654472"
# "SNPs with index effects 0.2023372 0.2000582 0.163749"
# "Max difference 0.714 0.684 0.166"
# "Min difference 0.06 0.067 0.399"
# "FDR"
# 0.2634184 0.2580996 0.235747
# "Absolute bias"
# "All SNPs 0.0104110579711333 0.0104054613380365 0.0114605126379993"
# "SNPs with index effects 0.00537867538587754 0.00514513222472855 0.0024400329351071"
# "MSE"
# "All SNPs 0.000204402533810614 0.000204086945256335 0.000239686882921436"
# "SNPs with index effects 0.000252300104459067 0.000247839006219805 0.000253684056252432"

# Cor = 0.25, linear cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0517411 0.0515802888888889 0.0500813888888889"
# "SNPs with index effects 0.0819816 0.0791218 0.0523754"
# "Max over SNPs with index effects 0.44 0.407 0.09"
# "Family-wise error 0.356 0.319 0.06"
# "Power"
# "All SNPs 0.1927176 0.1920731 0.1743309"
# "SNPs with index effects 0.1896502 0.188418 0.1697698"
# "Max difference 0.623 0.594 0.162"
# "Min difference 0.079 0.089 0.421"
# "FDR"
# 0.3018115 0.2957384 0.235771
# "Absolute bias"
# "All SNPs 0.010138799870157 0.0101312153568973 0.0108702317989681"
# "SNPs with index effects 0.00637027528988999 0.00615888461023111 0.00319531247465758"
# "MSE"
# "All SNPs 0.000194271767572405 0.000193871834505942 0.000216712738946826"
# "SNPs with index effects 0.000263622446320326 0.00025869419574603 0.000236567307299521"

# Cor = 0.45, linear cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0522951444444444 0.0521316222222222 0.0503577888888889"
# "SNPs with index effects 0.0919543999999999 0.0890183999999999 0.0573672"
# "Max over SNPs with index effects 0.543 0.51 0.15"
# "Family-wise error 0.499 0.462 0.089"
# "Power"
# "All SNPs 0.1885837 0.18834 0.1784918"
# "SNPs with index effects 0.1731758 0.172765 0.167179"
# "Max difference 0.669 0.649 0.286"
# "Min difference 0.097 0.101 0.421"
# "FDR"
# 0.3468273 0.340046 0.2554806
# "Absolute bias"
# "All SNPs 0.00988513844422573 0.00987681763850874 0.0103989181581592"
# "SNPs with index effects 0.00717882475093012 0.00699149893274168 0.00423927090692142"
# "MSE"
# "All SNPs 0.000185207868382773 0.000184775923719841 0.000199325972742666"
# "SNPs with index effects 0.000274849257014925 0.000269856183828024 0.000232516956169465"

# Cor = -0.25, linear cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0508019444444444 0.0506564444444444 0.050076"
# "SNPs with index effects 0.0650768 0.0625352 0.0521086"
# "Max over SNPs with index effects 0.239 0.213 0.086"
# "Family-wise error 0.13 0.116 0.052"
# "Power"
# "All SNPs 0.1950106 0.1931567 0.1534733"
# "SNPs with index effects 0.2087914 0.2051642 0.1496046"
# "Max difference 0.782 0.747 0.152"
# "Min difference 0.049 0.054 0.354"
# "FDR"
# 0.2376209 0.2336023 0.2583301
# "Absolute bias"
# "All SNPs 0.0106389085101093 0.0106365444539999 0.0120524960859214"
# "SNPs with index effects 0.00442198605635386 0.00418516624135828 0.00329042821047293"
# "MSE"
# "All SNPs 0.00021320495824589 0.000213022848771861 0.000264030890267758"
# "SNPs with index effects 0.000243990745347731 0.000240424622481841 0.000284122986051705"

# Cor = -0.45, linear cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0505506888888889 0.0504194555555556 0.0502508333333333"
# "SNPs with index effects 0.0605542 0.0582912 0.055379"
# "Max over SNPs with index effects 0.191 0.16 0.139"
# "Family-wise error 0.102 0.087 0.068"
# "Power"
# "All SNPs 0.1937517 0.1912425 0.1420548"
# "SNPs with index effects 0.2102458 0.2053626 0.1335934"
# "Max difference 0.819 0.789 0.147"
# "Min difference 0.313 0.335 0.568"
# "FDR"
# 0.2236123 0.2210899 0.2930534
# "Absolute bias"
# "All SNPs 0.0107921975113029 0.0107933616826551 0.012526566750549"
# "SNPs with index effects 0.00370542149879345 0.00348865479792019 0.00435022200787993"
# "MSE"
# "All SNPs 0.000219293618511697 0.000219253500740472 0.000284498730224854"
# "SNPs with index effects 0.000239536020859631 0.000236992392199409 0.000318035148699056"







# Cor = 0, binary cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0502113777777778 0.0501878333333333 0.0499969555555556"
# "SNPs with index effects 0.0536058 0.0532554 0.0501976"
# "Max over SNPs with index effects 0.105 0.103 0.074"
# "Family-wise error 0.069 0.066 0.046"
# "Power"
# "All SNPs 0.0899801 0.0897753 0.0863277"
# "SNPs with index effects 0.0913152 0.0909406 0.0859214"
# "Max difference 0.545 0.537 0.371"
# "Min difference 0.14 0.145 0.27"
# "FDR"
# 0.3698967 0.3693265 0.3687773
# "Absolute bias"
# "All SNPs 0.0368684826126062 0.0368659595482823 0.0378555378139538"
# "SNPs with index effects 0.020994147715853 0.0208147941582076 0.0180500781933168"
# "MSE"
# "All SNPs 0.00259614771506077 0.00259566431708227 0.00270455210061748"
# "SNPs with index effects 0.00352079953480176 0.00351401042317862 0.003571716694757"

# Cor = 0.25, binary cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0502895333333333 0.050268 0.0500205888888889"
# "SNPs with index effects 0.0550126 0.0546936 0.0506902"
# "Max over SNPs with index effects 0.117 0.113 0.077"
# "Family-wise error 0.097 0.092 0.063"
# "Power"
# "All SNPs 0.087194 0.0871263 0.0862036"
# "SNPs with index effects 0.0856318 0.085501 0.084851"
# "Max difference 0.32 0.316 0.203"
# "Min difference 0.256 0.265 0.4"
# "FDR"
# 0.3911468 0.3901263 0.3739837
# "Absolute bias"
# "All SNPs 0.0384704052658369 0.0384694774302707 0.0391409545721679"
# "SNPs with index effects 0.0212863699956228 0.0211683829402671 0.0190366461072716"
# "MSE"
# "All SNPs 0.00282335515300757 0.00282320393752022 0.0029012801833801"
# "SNPs with index effects 0.00371657675973347 0.0037138370493464 0.00379190349770837"


# Cor = 0.45, binary cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0503628666666667 0.0503453 0.0500756333333333"
# "SNPs with index effects 0.0563326 0.056059 0.051959"
# "Max over SNPs with index effects 0.134 0.123 0.083"
# "Family-wise error 0.091 0.089 0.067"
# "Power"
# "All SNPs 0.0841693 0.0841912 0.0845174"
# "SNPs with index effects 0.0796602 0.0796924 0.0812102"
# "Max difference 0.236 0.235 0.172"
# "Min difference 0.333 0.34 0.45"
# "FDR"
# 0.4142322 0.4129534 0.3901728
# "Absolute bias"
# "All SNPs 0.0401326953545985 0.0401326245793523 0.0405939551304355"
# "SNPs with index effects 0.0214110017422571 0.0213350571647158 0.0199225485423214"
# "MSE"
# "All SNPs 0.00306960772869807 0.00306963886566244 0.00312657172763969"
# "SNPs with index effects 0.0039215543460232 0.00392113243187849 0.00400532159048493"


# Cor = -0.25, binary cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0501086888888889 0.0500885666666667 0.0501041222222222"
# "SNPs with index effects 0.0517574 0.0514154 0.0521248"
# "Max over SNPs with index effects 0.084 0.078 0.096"
# "Family-wise error 0.052 0.051 0.06"
# "Power"
# "All SNPs 0.0927285 0.0921543 0.0820381"
# "SNPs with index effects 0.0971024 0.0959624 0.0789662"
# "Max difference 0.601 0.588 0.291"
# "Min difference 0.08 0.084 0.179"
# "FDR"
# 0.3476923 0.348868 0.397623
# "Absolute bias"
# "All SNPs 0.0349014721893391 0.0348948820944247 0.0365883923526273"
# "SNPs with index effects 0.0202266136366426 0.0199184799658663 0.0183210859124466"
# "MSE"
# "All SNPs 0.00233065909062186 0.00232930348618419 0.00250496901160877"
# "SNPs with index effects 0.00327062601018712 0.00325346942760652 0.00323942017940092"


# Cor = -0.45, binary cases, MR-Egger HO
# "Type-1 error"
# "All SNPs 0.0501538 0.0501322777777778 0.0500273"
# "SNPs with index effects 0.0525694 0.0522182 0.0508008"
# "Max over SNPs with index effects 0.092 0.089 0.08"
# "Family-wise error 0.057 0.055 0.051"
# "Power"
# "All SNPs 0.0919425 0.091546 0.0845897"
# "SNPs with index effects 0.0954036 0.0946322 0.08341"
# "Max difference 0.566 0.559 0.323"
# "Min difference 0.265 0.268 0.381"
# "FDR"
# 0.3552635 0.3555877 0.378515
# "Absolute bias"
# "All SNPs 0.0356567015963754 0.0356521406786127 0.0370139554340206"
# "SNPs with index effects 0.0206054434036389 0.0203578794303291 0.0182528851443494"
# "MSE"
# "All SNPs 0.00243086542813107 0.0024299401064444 0.00257406524146085"
# "SNPs with index effects 0.00337002642694325 0.00335795804625962 0.00338113648493849"









# MR-RAPS, try the BMI examples #mr. raps need over.dispersion, without over.dispersion it becomes profile scoring 
library(mr.raps)
data(bmi.bmi)
attach(bmi.bmi)
mr.raps(beta.exposure[pval.selection < 1e-8], beta.outcome[pval.selection < 1e-8], se.exposure[pval.selection < 1e-8], se.outcome[pval.selection < 1e-8], over.dispersion = TRUE)

#p<1e-8
new_simex(beta.exposure[pval.selection < 1e-8], se.exposure[pval.selection < 1e-8], beta.outcome[pval.selection < 1e-8], se.outcome[pval.selection < 1e-8] , weighted = "1", method = "hedges-olkin", model = "ivw")
#b.ho = 0.9973255


#p<1e-6
new_simex(beta.exposure[pval.selection < 1e-6], se.exposure[pval.selection < 1e-6], beta.outcome[pval.selection < 1e-6], se.outcome[pval.selection < 1e-6] , weighted = "1", method = "hedges-olkin", model = "ivw")
#b.ho = 1.008856

#p<1e-4
new_simex(beta.exposure[pval.selection < 1e-4], se.exposure[pval.selection < 1e-4], beta.outcome[pval.selection < 1e-4], se.outcome[pval.selection < 1e-4] , weighted = "1", method = "hedges-olkin", model = "ivw")
#b.ho = 1.020834

#p<1e-2
new_simex(beta.exposure[pval.selection < 1e-2], se.exposure[pval.selection < 1e-2], beta.outcome[pval.selection < 1e-2], se.outcome[pval.selection < 1e-2] , weighted = "1", method = "hedges-olkin", model = "ivw")
#b.ho = 1.006448

# indistinguishable




# Cor = 0, linear cases, MR RAPS
# "Type-1 error"
# "All SNPs 0.0512065888888889 0.0499791555555556"
# "SNPs with index effects 0.0723604 0.050244"
# "Max over SNPs with index effects 0.325 0.075 "
# "Family-wise error 0.22 0.043 "
# "Power"
# "All SNPs 0.194963 0.1657946 "
# "SNPs with index effects 0.2023372 0.1639632 "
# "Max difference 0.714 0.167 "
# "Min difference 0.06 0.39 "
# "FDR"
# "0.263418391715108 0.23455794202996 "
# "Absolute bias"
# "All SNPs 0.0104110579711333 0.0114312634357407 "
# "SNPs with index effects 0.00537867538587754 0.00243673776063637 "
# "MSE"
# "All SNPs 0.000204402533810614 0.000238435356584011 "
# "SNPs with index effects 0.000252300104459067 0.000251926849632091 "

# Cor = 0.25, linear cases, MR RAPS
# "Type-1 error"
# "All SNPs 0.0517411 0.0501627"
# "SNPs with index effects 0.0819816 0.053463"
# "Max over SNPs with index effects 0.44 0.106"
# "Family-wise error 0.356 0.067"
# "Power"
# "All SNPs 0.1927176 0.1769202"
# "SNPs with index effects 0.1896502 0.1716878"
# "Max difference 0.623 0.2"
# "Min difference 0.421 0.718"
# "FDR"
# "0.301811496297562 0.237454186260942"
# "Absolute bias"
# "All SNPs 0.010138799870157 0.0107037371804852"
# "SNPs with index effects 0.00637027528988999 0.00350428524506206"
# "MSE"
# "All SNPs 0.000194271767572405 0.000210897414159918"
# "SNPs with index effects 0.000263622446320326 0.000233297262234938"

# Cor = 0.45, linear cases, MR RAPS
# "Type-1 error"
# "All SNPs 0.0522951444444444 0.0503588 0.0503588"
# "SNPs with index effects 0.0919543999999999 0.0573036 0.0573036"
# "Max over SNPs with index effects 0.543 0.148 0.148"
# "Family-wise error 0.499 0.089 0.089"
# "Power"
# "All SNPs 0.1885837 0.1786884 0.1786884"
# "SNPs with index effects 0.1731758 0.1672064 0.1672064"
# "Max difference 0.669 0.286 0.286"
# "Min difference 0.097 0.417 0.417"
# "FDR"
# "0.346827332382354 0.255238519442341 0.255238519442341"
# "Absolute bias"
# "All SNPs 0.00988513844422573 0.0103819964350209 0.0103819964350209"
# "SNPs with index effects 0.00717882475093012 0.00426515072450117 0.00426515072450117"
# "MSE"
# "All SNPs 0.000185207868382773 0.000198711037185391 0.000198711037185391"
# "SNPs with index effects 0.000274849257014925 0.000231994841484114 0.000231994841484114"




# Cor = -0.25, linear cases, MR RAPS
# "Type-1 error"
# "All SNPs 0.0508019777777778 0.0507768333333333 "
# "SNPs with index effects 0.0650774 0.0639964"
# "Max over SNPs with index effects 0.239 0.212 "
# "Family-wise error 0.13 0.192 "
# "Power"
# "All SNPs 0.1950105 0.1615531 "
# "SNPs with index effects 0.2087936 0.1658968"
# "Max difference 0.865 0.379 "
# "Min difference 0.049 0.334 "
# "FDR"
# "0.237620631611233 0.278374479975919 "
# "Absolute bias"
# "All SNPs 0.0106388869040937 0.012111168208625 "
# "SNPs with index effects 0.00442221328051916 0.00245481487478565 "
# "MSE"
# "All SNPs 0.000213204943716867 0.000266890250737743 "
# "SNPs with index effects 0.000243997252526132 0.00030591789098586 "

# Cor = -0.45, linear cases, MR RAPS
# "Type-1 error"
# "All SNPs 0.0505506888888889 0.0502451111111111 "
# "SNPs with index effects 0.0605542 0.0549986 "
# "Max over SNPs with index effects 0.191 0.137"
# "Family-wise error 0.102 0.063"
# "Power"
# "All SNPs 0.1937517 0.1423198"
# "SNPs with index effects 0.2102458 0.133682"
# "Max difference 0.819 0.146"
# "Min difference 0.313 0.57"
# "FDR"
# "0.223612259970458 0.291490487098303"
# "Absolute bias"
# "All SNPs 0.0107921975113029 0.012484798007638"
# "SNPs with index effects 0.00370542149879345 0.0043041324498974"
# "MSE"
# "All SNPs 0.000219293618511697 0.00028242045244254"
# "SNPs with index effects 0.000239536020859631 0.000314511404063932"







#MR raps reproduce
BMI_men <- read.delim("C:/Users/caisy/Desktop/BMI GIANT/BMI_men")
BMI_women <- read.delim("C:/Users/caisy/Desktop/BMI GIANT/BMI_women")
BMI_Euro <- read.delim("C:/Users/caisy/Desktop/BMI GIANT/BMI_Euro")
BMI_all <- read.delim("C:/Users/caisy/Desktop/BMI GIANT/BMI_all")

summary(BMI_men)# number of SNPs:2477630, in the paper : 2477617

summary(BMI_women)# number of SNPs:2494584, in the paper : 2494571

summary(BMI_Euro)# number of SNPs: 2554637, in the paper : 2506448

summary(BMI_all)# number of SNPs: 2555510, in the paper : 2555496

sum(BMI_men$p < 1e-8 && BMI_women$p < 1e-8)
sum(BMI_Euro$p < 1e-8)


if(BMI_men$SNP == BMI_women$SNP)
print("yes")










##########################Slope Hunter
testData <- read.csv("C:/Users/caisy/Desktop/index event/testData", sep="")
attach(testData)
slope =  hunt(dat = testData, xbeta_col="xbeta", xse_col="xse",
                     ybeta_col="ybeta", yse_col="yse",
                     xp_thresh = 0.05, Bootstrapping = FALSE, show_adjustments = TRUE, seed=2019)


# updated
# Cor = 0, linear cases, SH
# "Type-1 error"
# "All SNPs 0.0512065888888889 0.0503813666666667"
# "SNPs with index effects 0.0723604 0.057275 "
# "Max over SNPs with index effects 0.325 0.155 "
# "Family-wise error 0.22 0.088 "
# "Power"
# "All SNPs 0.194963 0.1821883 "
# "SNPs with index effects 0.2023372 0.1833256 "
# "Max difference 0.714 0.445 "
# "Min difference 0.414 0.596 "
# "FDR"
# "0.263418391715108 0.238050112925737"
# "Absolute bias"
# "All SNPs 0.0104110579711333 0.0107466773666223 "
# "SNPs with index effects 0.00537867538587754 0.00361444614347466 "
# "MSE"
# "All SNPs 0.000204402533810614 0.000216097502820684 "
# "SNPs with index effects 0.000252300104459067 0.000242075947194378 "

# Cor = 0.25, linear cases, SH
# Type-1 error"
# "All SNPs 0.0517411 0.0506464222222222 "
# "SNPs with index effects 0.0819816 0.061963 "
# "Max over SNPs with index effects 0.44 0.188 "
# "Family-wise error 0.356 0.128 "
# "Power"
# "All SNPs 0.1927176 0.1831714 "
# "SNPs with index effects 0.1896502 0.1780104 "
# "Max difference 0.623 0.348 "
# "Min difference 0.421 0.634 "
# "FDR"
# "0.301811496297562 0.258207784696137 "
# "Absolute bias"
# "All SNPs 0.010138799870157 0.0104644371695438 "
# "SNPs with index effects 0.00637027528988999 0.00439588271731088 "
# "MSE"
# "All SNPs 0.000194271767572405 0.000204829192595881 "
# "SNPs with index effects 0.000263622446320326 0.000242321367458246 "

# Cor = 0.45, linear cases, SH
# "Type-1 error"
# "All SNPs 0.0522951444444444 0.0509552444444444 "
# "SNPs with index effects 0.0919543999999999 0.0673568 "
# "Max over SNPs with index effects 0.543 0.267 "
# "Family-wise error 0.499 0.169 "
# "Power"
# "All SNPs 0.1885837 0.1822266 "
# "SNPs with index effects 0.1731758 0.1690902 "
# "Max difference 0.512 0.258 "
# "Min difference 0.428 0.665 "
# "FDR"
# "0.346827332382354 0.284870605251917 "
# "Absolute bias"
# "All SNPs 0.00988513844422573 0.0102238848573852 "
# "SNPs with index effects 0.00717882475093012 0.00507251396507379 "
# "MSE"
# "All SNPs 0.000185207868382773 0.000195737461369862 "
# "SNPs with index effects 0.000274849257014925 0.000245841797998493 "


# Cor = -0.25, linear cases, SH
# "Type-1 error"
# "All SNPs 0.0508019777777778 0.0501938555555556 "
# "SNPs with index effects 0.0650774 0.053868 "
# "Max over SNPs with index effects 0.239 0.113 "
# "Family-wise error 0.13 0.064 "
# "Power"
# "All SNPs 0.1950105 0.1801057 "
# "SNPs with index effects 0.2087936 0.1840598 "
# "Max difference 0.782 0.517 "
# "Min difference 0.372 0.518 "
# "FDR"
# "0.237620631611233 0.226404816923453 "
# "Absolute bias"
# "All SNPs 0.0106388869040937 0.0109229787635377 "
# "SNPs with index effects 0.00442221328051916 0.00303634443984427 "
# "MSE"
# "All SNPs 0.000213204943716867 0.000223055351095037 "
# "SNPs with index effects 0.000243997252526132 0.00024057180783726 "

# Cor = -0.45, linear cases, SH
# "Type-1 error"
# "All SNPs 0.0505506888888889 0.0501055888888889 "
# "SNPs with index effects 0.0605542 0.0520916 "
# "Max over SNPs with index effects 0.191 0.084 "
# "Family-wise error 0.102 0.056 "
# "Power"
# "All SNPs 0.1937517 0.1767023 "
# "SNPs with index effects 0.2102458 0.1808092 "
# "Max difference 0.473 0.23 "
# "Min difference 0.313 0.429 "
# "FDR"
# "0.223612259970458 0.223664324038389 "
# "Absolute bias"
# "All SNPs 0.0107921975113029 0.011070253060194 "
# "SNPs with index effects 0.00370542149879345 0.00265983954450445 "
# "MSE"
# "All SNPs 0.000219293618511697 0.000229070593148634 "
# "SNPs with index effects 0.000239536020859631 0.0002428447196124 "




# Cor = 0, binary cases, SH
# "Type-1 error"
# "All SNPs 0.0502113777777778 0.0501221777777778 "
# "SNPs with index effects 0.0536058 0.0515778 "
# "Max over SNPs with index effects 0.105 0.078 "
# "Family-wise error 0.069 0.058 "
# "Power"
# "All SNPs 0.0899801 0.0863873 "
# "SNPs with index effects 0.0913152 0.086755 "
# "Max difference 0.526 0.34 "
# "Min difference 0.14 0.273 "
# "FDR"
# "0.369896702341276 0.372853003770617 "
# "Absolute bias"
# "All SNPs 0.0368684826126062 0.0385442219487322 "
# "SNPs with index effects 0.020994147715853 0.0182638397856393 "
# "MSE"
# "All SNPs 0.00259614771506077 0.00282361188969297 "
# "SNPs with index effects 0.00352079953480176 0.00374859781780282 "

# Cor = 0.25, binary cases, SH
# "Type-1 error"
# "All SNPs 0.0502895333333333 0.0500941777777778 "
# "SNPs with index effects 0.0550126 0.0512948 "
# "Max over SNPs with index effects 0.117 0.079 "
# "Family-wise error 0.097 0.072 "
# "Power"
# "All SNPs 0.087194 0.0861665 "
# "SNPs with index effects 0.0856318 0.0859792 "
# "Max difference 0.3905 0.2435 "
# "Min difference 0.256 0.452 "
# "FDR"
# "0.391146750243877 0.373667264012122 "
# "Absolute bias"
# "All SNPs 0.0384704052658369 0.0401209169085676 "
# "SNPs with index effects 0.0212863699956228 0.0185208135183606 "
# "MSE"
# "All SNPs 0.00282335515300757 0.00305501916257952 0.00305501916257952"
# "SNPs with index effects 0.00371657675973347 0.00402030801569523 0.00402030801569523"

# Cor = 0.45, binary cases, SH
# "Type-1 error"
# "All SNPs 0.0503628666666667 0.0501116444444444 "
# "SNPs with index effects 0.0563326 0.0515918 "
# "Max over SNPs with index effects 0.134 0.084 "
# "Family-wise error 0.091 0.068 "
# "Power"
# "All SNPs 0.0841693 0.0851603 "
# "SNPs with index effects 0.0796602 0.0839242 "
# "Max difference 0.243 0.146 "
# "Min difference 0.252 0.442 "
# "FDR"
# "0.414232224058921 0.380706337259069 "
# "Absolute bias"
# "All SNPs 0.0401326953545985 0.0417912391394504 "
# "SNPs with index effects 0.0214110017422571 0.0190505298612302 "
# "MSE"
# "All SNPs 0.00306960772869807 0.00331208791988539 "
# "SNPs with index effects 0.0039215543460232 0.00430016064612819 "

# Cor = -0.25, binary cases, SH
# "Type-1 error"
# "All SNPs 0.0501538 0.0501441222222222 "
# "SNPs with index effects 0.0525694 0.051995 "
# "Max over SNPs with index effects 0.092 0.083 "
# "Family-wise error 0.057 0.062 "
# "Power"
# "All SNPs 0.0919425 0.0857263 "
# "SNPs with index effects 0.0954036 0.0856436 "
# "Max difference 0.584 0.372 "
# "Min difference 0.265 0.366 "
# "FDR"
# "0.355263460225852 0.377764667760352 "
# "Absolute bias"
# "All SNPs 0.0356567015963754 0.037319546773977 "
# "SNPs with index effects 0.0206054434036389 0.0180933402544783 "
# "MSE"
# "All SNPs 0.00243086542813107 0.00264629530847492 "
# "SNPs with index effects 0.00337002642694325 0.00350908865234254 "

# Cor = -0.45, binary cases, SH
# "Type-1 error"
# "All SNPs 0.0501086888888889 0.0501289222222222 "
# "SNPs with index effects 0.0517574 0.0516504 "
# "Max over SNPs with index effects 0.084 0.089 "
# "Family-wise error 0.052 0.062 "
# "Power"
# "All SNPs 0.0927285 0.0848342 "
# "SNPs with index effects 0.0971024 0.0835284 "
# "Max difference 0.601 0.371 "
# "Min difference 0.1885 0.2575 "
# "FDR"
# "0.347692258084453 0.382089499241005 "
# "Absolute bias"
# "All SNPs 0.0349014721893391 0.0362081850593897 "
# "SNPs with index effects 0.0202266136366426 0.0177453981484365 "
# "MSE"
# "All SNPs 0.00233065909062186 0.00248654171342398 "
# "SNPs with index effects 0.00327062601018712 0.00328114996949943 "


###############HO Negative

for(k in 0 : 1000)
{
    set.seed(k)
    alpha = runif(1000, min = 0, max = 0.2)

    x = runif(1000, min = 0.28, max = 0.37)
    xse = runif(1000, min = 0.124, max = 0.15)
    xbeta = rnorm(length(x), mean = x, sd = xse)

    yse = 2 * xse
    y = alpha + x * 1
    ybeta = rnorm(length(y), mean = y, sd = yse)
    
    weight = 1/ yse ^ 2
    
    ho = (sum(weight, na.rm = TRUE) * sum(weight * xbeta ^ 2, na.rm = TRUE) - (sum(weight * xbeta, na.rm = TRUE)) ^ 2) / 
        (sum(weight, na.rm = TRUE) * sum(weight * xbeta ^ 2, na.rm = TRUE) - (sum(weight * xbeta, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE))
    
    if(ho < 0){print(k)}
}



set.seed(11)
alpha = runif(1000, min = 0, max = 0.2)

x = runif(1000, min = 0.28, max = 0.37)
xse = runif(1000, min = 0.124, max = 0.15)
xbeta = rnorm(length(x), mean = x, sd = xse)

yse = 2 * xse
y = alpha + x * 1
ybeta = rnorm(length(y), mean = y, sd = yse)

weight = 1 / yse ^ 2
weighted.mean(xse ^ 2, weight) #  0.01856456
#sum(weight * xse ^ 2) / sum(weight), Checked: match

weightedVar(xbeta, weight) # 0.01839264
#sum(weight * xbeta ^ 2) / sum(weight) - (sum(weight * xbeta) / sum(weight)) ^ 2, Checked : match


fits = lm(ybeta ~ xbeta, weights = weight, x = TRUE, y = TRUE)
fits$coef[2] #0.0280300 

ho = (sum(weight, na.rm = TRUE) * sum(weight * xbeta ^ 2, na.rm = TRUE) - (sum(weight * xbeta, na.rm = TRUE)) ^ 2) / 
    (sum(weight, na.rm = TRUE) * sum(weight * xbeta ^ 2, na.rm = TRUE) - (sum(weight * xbeta, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE))
#-106.1333943

#FAST SIMEX
lambda = seq(0.25, 5, 0.25)
set.seed(0)
B <- 100

simex.estimates = fits$coef[2]
simex.variance.sandwich = vcovHC(fits)[2,2]    

sum.weight.weight <- sum(weight) * weight
sum.ybeta <- sum(weight * ybeta)

slope.ho = fits$coef[2] * ho
m = length(xbeta)

#set.seed(seed)

for(l in 1:length(lambda)) {
    # simulate matrix of xbeta + sampling errors
    simex.errors <- matrix(rnorm(m*B, mean= xbeta, sd = xse*sqrt(lambda[l])), nrow = m, ncol = B)
    weight.simex.errors <- weight %*% simex.errors
    
    simex.numer <- (sum.weight.weight * ybeta) %*% simex.errors - weight.simex.errors * sum.ybeta
    simex.denom <- sum.weight.weight %*% simex.errors^2 - weight.simex.errors^2
    simexcoef <- simex.numer / simex.denom
    
    # take their mean 
    simex.estimates = c(simex.estimates, mean(simexcoef))
    
}

#set.seed(seed)
for(l in 1:length(lambda)){
    simexdata = rnorm(length(xbeta), mean = xbeta, sd = xse*sqrt(lambda[l]))
    simexfit = lm(ybeta ~ simexdata, weights = weight)
    svar = vcovHC(simexfit)[2,2]
    
    simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
}


simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
rownames(simex.estimates) <- NULL

simex.estimates

simexMLE.fast <- nlm(simexllhdbivariate, c(slope.ho, 1), simex.estimates)
simexMLE.fast
slope.fast = simexMLE.fast$estimate[1] #switch to IVW? #high uncertainty

h <- hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates=simex.estimates)
h
h.inv <- solve(h)
simexSE.fast <- sqrt(h.inv[1,1])
simexSE.fast 
























IPF_prune9 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune9", sep="")
attach(IPF_prune9)
new_simex(beta0.9, se.beta0.9, coef0.9, se.coef0.9, weighted = "1", method = "hedges-olkin")
#b.raw = 0.04111587, b= 0.3299027

IPF_prune98 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune98", sep="")
attach(IPF_prune98) 
new_simex(beta0.98, se.beta0.98, coef0.98, se.coef0.98, weighted = "1", method = "simex", type = "fast", B = 100)
#b.raw = -0.002627454, b.ho= -0.0709321, b.fast.simex = -0.07385378

IPF_prune99 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune99", sep="")
attach(IPF_prune99)
new_simex(beta0.99, se.beta0.99, coef0.99, se.coef0.99, weighted = "1", method = "hedges-olkin")
#b.raw = -0.0009743728, b= -0.03089265

IPF_0.9 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune0.9_noNA", sep="")
attach(IPF_0.9)
new_simex(beta_0.9, se.beta_0.9, coef_0.9, se.coef_0.9, weighted = "1", method = "hedges-olkin")
#b.raw = 0.00848723, b= 0.6989148

IPF_0.98 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune0.98_noNA", sep="")
attach(IPF_0.98)
new_simex(beta_0.98, se.beta_0.98, coef_0.98, se.coef_0.98, weighted = "1", method = "hedges-olkin")
#b.raw = -0.0004212814, b= 0.9124239

IPF_0.99 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune0.99_noNA", sep="")
attach(IPF_0.99)
new_simex(beta_0.99, se.beta_0.99, coef_0.99, se.coef_0.99, weighted = "1", method = "hedges-olkin")
#b.raw = 0.002042328, b= -1.460703




##############Type-1 error simulation, fast simex
# Cor = 0, linear, B = 1000, iter = 100
# "All SNPs 0.0511935555555556 0.051031 0.0500277777777778"
# "SNPs with index effects 0.072732 0.069894 0.050758"
# "Max over SNPs with index effects 0.32 0.31 0.15"
# "Family-wise error 0.19 0.15 0.04"
# "Power"
# "All SNPs 0.194466 0.193274 0.164926"
# "SNPs with index effects 0.201934 0.199592 0.163388"
# "Max difference 0.67 0.63 0.1"
# "Min difference 0.31 0.33 0.65"
# "Absolute bias"
# "All SNPs 0.0104206968282488 0.0104150090644468 0.011484509929308"
# "SNPs with index effects 0.00546688333306111 0.00523401381666081 0.00286296590644508"
# "MSE"
# "All SNPs 0.000204650551481276 0.000204334123982798 0.000240545313182742"
# "SNPs with index effects 0.000251370118238511 0.000246857245831471 0.000253266553012597"
# FDR of SNP with index effects
# 0.2648016 0.2593604 0.2370252


#Cor = 0.25, linear, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0517477777777778 0.051579 0.0500955555555556"
# "SNPs with index effects 0.082708 0.079678 0.05253"
# "Max over SNPs with index effects 0.44 0.4 0.16"
# "Family-wise error 0.35 0.32 0.04"
# "Power"
# "All SNPs 0.192281 0.191554 0.17393"
# "SNPs with index effects 0.189148 0.187776 0.169748"
# "Max difference 0.76 0.72 0.27"
# "Min difference 0.34 0.35 0.67"
# "Absolute bias"
# "All SNPs 0.0101484074864231 0.01014073316182 0.0108904741727252"
# "SNPs with index effects 0.00644133854241342 0.00622890159935153 0.00337919070272519"
# "MSE"
# "All SNPs 0.000194502219754905 0.000194098818438217 0.000217360399728252"
# "SNPs with index effects 0.000262674918763437 0.000257676299189491 0.000235684192787956"
# FDR of SNP with index effects
# 0.3042346 0.2979129 0.2363257


#Cor = 0.45, linear, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0523204444444444 0.0521503333333333 0.0503702222222222"
# "SNPs with index effects 0.093016 0.090026 0.057488"
# "Max over SNPs with index effects 0.57 0.53 0.17"
# "Family-wise error 0.46 0.43 0.07"
# "Power"
# "All SNPs 0.187988 0.187837 0.178065"
# "SNPs with index effects 0.172444 0.172048 0.167392"
# "Max difference 0.48 0.45 0.1"
# "Min difference 0.07 0.1 0.41"
# "Absolute bias"
# "All SNPs 0.00989462702531177 0.00988616934136801 0.0104199875296835"
# "SNPs with index effects 0.00723781490790518 0.00704904285405877 0.00432808015056223"
# "MSE"
# "All SNPs 0.000185424451915713 0.000184987050872338 0.000199952031221221"
# "SNPs with index effects 0.000273917315059531 0.00026884009256009 0.000231403682350343"
# FDR of SNP with index effects
# 0.3503955 0.3435137 0.2556386



#Cor = -0.25, linear, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0507851111111111 0.0506335555555556 0.0501217777777778"
# "SNPs with index effects 0.06538 0.062844 0.052484"
# "Max over SNPs with index effects 0.28 0.26 0.16"
# "Family-wise error 0.1 0.07 0.05"
# "Power"
# "All SNPs 0.194393 0.192631 0.153017"
# "SNPs with index effects 0.208174 0.2046 0.149206"
# "Max difference 0.805 0.785 0.175"
# "Min difference 0.35 0.36 0.67"
# "Absolute bias"
# "All SNPs 0.0106485283730456 0.0106461680732132 0.0120695822931787"
# "SNPs with index effects 0.00453428829023807 0.0043016763425316 0.0035287988058113"
# "MSE"
# "All SNPs 0.00021346917622019 0.000213288919614171 0.000264690217033289"
# "SNPs with index effects 0.000243117439968217 0.000239519049225023 0.000283644770481963"
# FDR of SNP with index effects
# 0.2390022 0.23498 0.2602211



# Cor = -0.45, linear, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0505334444444444 0.050407 0.0502908888888889"
# "SNPs with index effects 0.06085 0.058628 0.055466"
# "Max over SNPs with index effects 0.23 0.19 0.18"
# "Family-wise error 0.04 0.04 0.07"
# "Power"
# "All SNPs 0.193115 0.190594 0.141541"
# "SNPs with index effects 0.20966 0.204688 0.133026"
# "Max difference 0.87 0.87 0.22"
# "Min difference 0.09 0.14 0.38"
# "Absolute bias"
# "All SNPs 0.0108018732677448 0.0108030963220345 0.0125448092998194"
# "SNPs with index effects 0.00384371968056735 0.00363540490143668 0.00452981340881213"
# "MSE"
# "All SNPs 0.000219569308269704 0.000219533252899375 0.000285276139472943"
# "SNPs with index effects 0.000238719136394411 0.000236159527710479 0.000317838064634466"
# FDR of SNP with index effects
# 0.2249455 0.2226526 0.2942618





# Cor = 0.0, binary, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0502093333333333 0.0501857777777778 0.0499336666666667"
# "SNPs with index effects 0.053552 0.05324 0.05031"
# "Max over SNPs with index effects 0.17 0.16 0.15"
# "Family-wise error 0.06 0.06 0.07"
# "Power"
# "All SNPs 0.089988 0.089808 0.086249"
# "SNPs with index effects 0.091268 0.09094 0.085976"
# "Max difference 0.62 0.62 0.42"
# "Min difference 0.12 0.12 0.3"
# "Absolute bias"
# "All SNPs 0.0368813311438917 0.0368786265229646 0.0380515181619664"
# "SNPs with index effects 0.0214690159886144 0.0213034973462945 0.0193626538769317"
# "MSE"
# "All SNPs 0.0025979838041602 0.00259747537673782 0.00272810333907299"
# "SNPs with index effects 0.00352182589415364 0.0035146924586322 0.00359287725652554"
# FDR of SNP with index effects
# 0.3697832 0.3692606 0.3691502


# Cor = 0.25, binary, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0502821111111111 0.050251 0.0499284444444444"
# "SNPs with index effects 0.054862 0.054502 0.05042"
# "Max over SNPs with index effects 0.16 0.16 0.14"
# "Family-wise error 0.08 0.09 0.06"
# "Power"
# "All SNPs 0.087418 0.087298 0.086135"
# "SNPs with index effects 0.085456 0.08524 0.084708"
# "Max difference 0.51 0.51 0.36"
# "Min difference 0.24 0.24 0.39"
# "Absolute bias"
# "All SNPs 0.038489089644309 0.0384880605279851 0.0393201335728187"
# "SNPs with index effects 0.021732643785347 0.0216195741234901 0.0198795092387058"
# "MSE"
# "All SNPs 0.00282587847616851 0.00282571218777474 0.00292372551457297"
# "SNPs with index effects 0.00371917159122863 0.00371619901640417 0.003818144271057"
# FDR of SNP with index effects
# 0.3909833 0.3900187 0.3731277


# Cor = 0.45, binary, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0503308888888889 0.0503101111111111 0.0499794444444444"
# "SNPs with index effects 0.05574 0.055462 0.051132"
# "Max over SNPs with index effects 0.19 0.19 0.14"
# "Family-wise error 0.08 0.07 0.04"
# "Power"
# "All SNPs 0.084523 0.08453 0.084777"
# "SNPs with index effects 0.079778 0.079776 0.081558"
# "Max difference 0.46 0.45 0.37"
# "Min difference 0.38 0.38 0.54"
# "Absolute bias"
# "All SNPs 0.0401611333696361 0.0401610337109349 0.0407460433715073"
# "SNPs with index effects 0.0218741348407145 0.0218009322619508 0.0205150118310745"
# "MSE"
# "All SNPs 0.00307321371067194 0.00307324241274938 0.00314617295503247"
# "SNPs with index effects 0.00392394846170777 0.00392339537228249 0.00402995758828008"
# FDR of SNP with index effects
# 0.4113107 0.4101066 0.3853493


# Cor = -0.25, binary, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0501234444444444 0.0500923333333333 0.049931"
# "SNPs with index effects 0.052006 0.051648 0.050634"
# "Max over SNPs with index effects 0.16 0.17 0.15"
# "Family-wise error 0.08 0.09 0.08"
# "Power"
# "All SNPs 0.092374 0.091954 0.084344"
# "SNPs with index effects 0.095584 0.094778 0.082784"
# "Max difference 0.71 0.69 0.38"
# "Min difference 0.12 0.13 0.27"
# "Absolute bias"
# "All SNPs 0.0356673947561281 0.0356625139226917 0.0372158544483943"
# "SNPs with index effects 0.0211231245798008 0.020899879113445 0.0191953824643846"
# "MSE"
# "All SNPs 0.0024325617152406 0.00243159306723973 0.00259761474339383"
# "SNPs with index effects 0.00336844267153512 0.00335589956037686 0.00339399424195958"
# FDR of SNP with index effects
# 0.352368 0.3527242 0.379514


# Cor = -0.45, binary, B= 1000, iter = 100
# "Type-1 error"
# "All SNPs 0.0500966666666667 0.0500637777777778 0.0500118888888889"
# "SNPs with index effects 0.051524 0.051238 0.052016"
# "Max over SNPs with index effects 0.17 0.16 0.16"
# "Family-wise error 0.08 0.08 0.09"
# "Power"
# "All SNPs 0.093174 0.092568 0.081891"
# "SNPs with index effects 0.097168 0.096026 0.078532"
# "Max difference 0.57 0.52 0.18"
# "Min difference 0.17 0.17 0.29"
# "Absolute bias"
# "All SNPs 0.0349096988700411 0.0349027250762418 0.0367908881182046"
# "SNPs with index effects 0.0208059843811607 0.0205315480052917 0.0190415259229873"
# "MSE"
# "All SNPs 0.00233224181668559 0.00233082832788587 0.0025282788212155"
# "SNPs with index effects 0.00326988541827685 0.00325214707705715 0.00324916220866428"
# FDR of SNP with index effects
# 0.3465149 0.347933 0.3984435