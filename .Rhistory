library(devtools)
setwd("C:/Users/caisy/Desktop/index event/")
library(sandwich)
library(numDeriv)
library(mvtnorm)
library(survival)
library(data.table)
library(matrixStats)
library(SlopeHunter)
simexllhdbivariate = function (pars, simex.estimates)
{
betaLambdaMean = pars[1] / (1 + (simex.estimates[, 1] + 1) * exp(pars[2]))
betaLambdaVar = simex.estimates[, 3]
llhd = -sum(dnorm(simex.estimates[, 2], mean = betaLambdaMean, sd = sqrt(betaLambdaVar), log = T))
llhd
}
simexloglikelihood = function (pvar, pmean, simex.estimates)
{
betaLambdaMean = pmean / (1 + (simex.estimates[, 1] + 1) * exp(pvar))
betaLambdaVar = simex.estimates[, 3]
llhd = -sum(dnorm(simex.estimates[, 2], mean = betaLambdaMean, sd = sqrt(betaLambdaVar), log = T))
llhd
}
simexpllhd = function (p, simex.estimates, variance.ratio)
{
lowerbound = (p ^ 2 * variance.ratio - 1) / (simex.estimates[,1] + 1)
if (min(lowerbound) > 0)
lowerbound = max(log(lowerbound / (simex.estimates[, 1] + 1)))
optimise(simexloglikelihood, c(lowerbound, 10), p, simex.estimates)$objective
}
simexpCI = function (simex.estimates, variance.ratio)
{
profileFit = optimise(simexpllhd, c(-100, 100), simex.estimates, variance.ratio)
obj = function(p)
(2 * (simexpllhd(p, simex.estimates, variance.ratio) - profileFit$obj) - qchisq(0.95, 1)) ^ 2
lowerCI = optimise(obj, c(-100, profileFit$min))$min
upperCI = optimise(obj, c(profileFit$min, 100))$min
c(profileFit$min, lowerCI, upperCI)
}
new_simex = function (xbeta,
xse,
ybeta,
yse,
weighted,
prune = NULL,
method,
model,
B = 100,
lambda = seq(0.25, 5, 0.25),
seed = 0)
{
if (is.null(prune)){
prune = 1:length(xbeta)}
xbetaprune = xbeta[prune]
xseprune = xse[prune]
ybetaprune = ybeta[prune]
yseprune = yse[prune]
if (weighted == "1"){
weight = 1 / yseprune ^ 2
}
if (weighted == "2"){
weight = 1 / (yseprune ^ 2 + (ybetaprune / xbetaprune) ^ 2 * xseprune ^ 2)
}
if (weighted == "0"){
weight = rep(1, length(prune))}
if (tolower(model) == "egger"){
fit = lm(ybetaprune ~ xbetaprune, weights = weight)
b.raw = as.numeric(fit$coef[2])
}
if (tolower(model) == "ivw"){
fit = lm(ybetaprune ~ xbetaprune - 1, weights = weight)
b.raw = as.numeric(fit$coef)
}
if (tolower(method) == "hedges-olkin") {
if(tolower(model) == "egger"){
ho = (sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2) /
(sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE))
}
if (tolower(model) == "ivw"){
ho = sum(weight * xbeta ^ 2, na.rm = TRUE) /
(sum(weight * xbeta ^ 2, na.rm = TRUE) - sum(weight * xse ^ 2, na.rm = TRUE))
}
b = b.raw * ho
slope.ho = b
b.ci = rep(b, 2)
b.se = 0
simex.estimates = NULL
}
if(tolower(method) == "fast"){
if(tolower(model) == "egger"){
simex.estimates = fit$coef[2]
simex.variance.sandwich = vcovHC(fit)[2,2]
sum.weight.weight <- sum(weight) * weight
sum.ybeta <- sum(weight * ybetaprune)
ho = (sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2) /
(sum(weight, na.rm = TRUE) * sum(weight * xbetaprune ^ 2, na.rm = TRUE) - (sum(weight * xbetaprune, na.rm = TRUE)) ^ 2 - sum(weight) * sum(weight * xse ^ 2, na.rm = TRUE))
slope.ho = b.raw * ho
m = length(xbetaprune)
progress = txtProgressBar(max = length(lambda), width = 10, style = 3)
set.seed(seed)
for(l in 1:length(lambda)) {
# simulate matrix of xbeta + sampling errors
simex.errors <- matrix(rnorm(m*B, mean= xbetaprune, sd = xse*sqrt(lambda[l])), nrow = m, ncol = B)
weight.simex.errors <- weight %*% simex.errors
simex.numer <- (sum.weight.weight * ybetaprune) %*% simex.errors - weight.simex.errors * sum.ybeta
simex.denom <- sum.weight.weight %*% simex.errors^2 - weight.simex.errors^2
simexcoef <- simex.numer / simex.denom
# take their mean
simex.estimates = c(simex.estimates, mean(simexcoef))
setTxtProgressBar(progress, l)
}
set.seed(seed)
for(l in 1:length(lambda)){
simexdata = rnorm(length(xbetaprune), mean = xbetaprune, sd = xse*sqrt(lambda[l]))
simexfit = lm(ybetaprune ~ simexdata, weights = weight)
svar = vcovHC(simexfit)[2,2]
simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
setTxtProgressBar(progress, l)
}
simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
rownames(simex.estimates) <- NULL
simexMLE.fast = nlm(simexllhdbivariate, c(slope.ho ,log(ho-1)), simex.estimates = simex.estimates)
b = simexMLE.fast$estimate[1]
h = hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates = simex.estimates)
h.inv = solve(h)
b.se = sqrt(h.inv[1,1])
b.ci = c(b - qnorm(0.975) * b.se, b + qnorm(0.975) * b.se)
}
if(tolower(model) == "ivw"){
simex.estimates = fit$coef
simex.variance.sandwich = vcovHC(fit)
m = length(xbetaprune)
ho = sum(weight * xbeta ^ 2, na.rm = TRUE) /
(sum(weight * xbeta ^ 2, na.rm = TRUE) - sum(weight * xse ^ 2, na.rm = TRUE))
slope.ho = b.raw * ho
progress = txtProgressBar(max = length(lambda), width = 10, style = 3)
set.seed(seed)
for(l in 1:length(lambda)) {
# simulate matrix of xbeta + sampling errors
simex.errors <- matrix(rnorm(m*B, mean= xbetaprune, sd = xse*sqrt(lambda[l])), nrow = m, ncol = B)
simex.numer <- (weight * ybetaprune) %*% simex.errors
simex.denom <- weight %*% simex.errors ^ 2
simexcoef <- simex.numer / simex.denom
# take their mean
simex.estimates = c(simex.estimates, mean(simexcoef))
setTxtProgressBar(progress, l)
}
set.seed(seed)
for(l in 1:length(lambda)){
simexdata = rnorm(length(xbetaprune), mean = xbetaprune, sd = xse*sqrt(lambda[l]))
simexfit = lm(ybetaprune ~ simexdata - 1, weights = weight)
svar = vcovHC(simexfit)[1,1]
simex.variance.sandwich = c(simex.variance.sandwich, svar/B)
setTxtProgressBar(progress, l)
}
simex.estimates <- cbind(c(0,lambda), simex.estimates, simex.variance.sandwich)
colnames(simex.estimates) <- c("Lambda", "Coefficient", "Variance")
rownames(simex.estimates) <- NULL
simexMLE.fast <- nlm(simexllhdbivariate, c(slope.ho, log(ho - 1)), simex.estimates = simex.estimates)
b = simexMLE.fast$estimate[1] #-0.3354914
h <- hessian(simexllhdbivariate, simexMLE.fast$estimate, simex.estimates = simex.estimates)
h.inv <- solve(h)
b.se = sqrt(h.inv[1,1])
b.ci = c(b - qnorm(0.975) * b.se, b + qnorm(0.975) * b.se)
}
}
ybeta.adj = rep(0, length(ybeta))
ybeta.adj = ybeta - b * xbeta
yse.adj = sqrt(yse ^ 2 + b ^ 2 * xse ^ 2)
ychisq.adj = (ybeta.adj / yse.adj) ^ 2
yp.adj = pchisq(ychisq.adj, 1, lower = F)
results = list(
ybeta.adj = ybeta.adj,
yse.adj = yse.adj,
ychisq.adj = ychisq.adj,
yp.adj = yp.adj,
b = b,
b.ho = slope.ho,
b.se = b.se,
b.ci = b.ci,
b.raw = b.raw,
simex.estimates = simex.estimates
)
class(results) = ("indexevent")
results
}
IPF_prune99 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune99", sep="")
attach(IPF_prune99)
#Fast simex & HO
new_simex(beta0.99, se.beta0.99, coef0.99, se.coef0.99, weighted= "1", method= "hedges-olkin", model = "ivw")
#Fast simex & HO
new_simex(beta0.99, se.beta0.99, coef0.99, se.coef0.99, weighted= "1", method= "hedges-olkin", model = "egger")
IPF_prune98 <- read.csv("C:/Users/caisy/Desktop/index event/IPF_prune98", sep="")
attach(IPF_prune98)
testr98<-glm(coef0.98~beta0.98, weights = 1/se.coef0.98^2)
summary(testr98)
#Fast simex & HO
new_simex(beta0.99, se.beta0.99, coef0.99, se.coef0.99, weighted= "1", method= "hedges-olkin", model = "ivw")
library(mr.raps)
#MR-RAPS
mr.raps(beta0.99, coef0.99, se.beta0.99, se.coef0.99, over.dispersion = TRUE)
#MR-RAPS
mr.raps(beta0.99, coef0.99, se.beta0.99, se.coef0.99, niter = 1000, over.dispersion = TRUE)
#MR-RAPS
mr.raps(beta0.99, coef0.99, se.beta0.99, se.coef0.99, niter = 100, over.dispersion = TRUE)
#MR-RAPS
mr.raps.overdispersed(beta0.99, coef0.99, se.beta0.99, se.coef0.99, niter = 100)
#Slope hunter upadted
Sh0.99 <- hunt(dat = IPF_prune99,
xbeta_col="beta0.99", xse_col="se.beta0.99", xp_col= "p.beta0.99",
ybeta_col="coef0.99", yse_col="se.coef0.99", yp_col="p.coef0.99",
xp_thresh = 0.01, Bootstrapping = TRUE, show_adjustments = TRUE, seed=2019)
#LD-prune
system("C:/Users/caisy/Desktop/plink/plink --file CD_combined --r2 --ld-window-r2 0.1 --ld-window 250 --out LDpruneCD")
getAnywhere(hunt)
